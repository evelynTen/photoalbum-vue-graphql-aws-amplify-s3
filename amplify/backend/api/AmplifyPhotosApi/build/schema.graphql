
type Album @aws_iam @aws_cognito_user_pools {
  id: ID!
  owner: ID!
  ownerId: String!
  name: String!
  createdAt: String
  updatedAt: String
  photos(createdAt: ModelStringKeyConditionInput, filter: ModelPhotoFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelPhotoConnection
}

type Photo @aws_iam @aws_cognito_user_pools {
  id: ID!
  photoAlbumId: ID!
  createdAt: String
  updatedAt: String
  album: Album
  fullsize: S3Object!
  thumbnail: S3Object
  contentType: String
  gps: GPS
  height: Int
  width: Int
  size: Int
  owner: String
}

type S3Object @aws_iam @aws_cognito_user_pools {
  region: String!
  bucket: String!
  key: String!
}

type GPS @aws_iam @aws_cognito_user_pools {
  latitude: String!
  longitude: String!
  altitude: Float!
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelSubscriptionStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  in: [String]
  notIn: [String]
}

input ModelSubscriptionIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  in: [Int]
  notIn: [Int]
}

input ModelSubscriptionFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  in: [Float]
  notIn: [Float]
}

input ModelSubscriptionBooleanInput {
  ne: Boolean
  eq: Boolean
}

input ModelSubscriptionIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  in: [ID]
  notIn: [ID]
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelAlbumConnection @aws_iam @aws_cognito_user_pools {
  items: [Album]!
  nextToken: String
}

input ModelAlbumFilterInput {
  id: ModelIDInput
  owner: ModelIDInput
  ownerId: ModelStringInput
  name: ModelStringInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelAlbumFilterInput]
  or: [ModelAlbumFilterInput]
  not: ModelAlbumFilterInput
}

type Query {
  getAlbum(id: ID!): Album @aws_iam @aws_cognito_user_pools
  listAlbums(filter: ModelAlbumFilterInput, limit: Int, nextToken: String): ModelAlbumConnection @aws_iam @aws_cognito_user_pools
  getPhoto(id: ID!): Photo @aws_iam @aws_cognito_user_pools
  listPhotos(filter: ModelPhotoFilterInput, limit: Int, nextToken: String): ModelPhotoConnection @aws_iam @aws_cognito_user_pools
  photosByIdAndCreatedAt(id: ID!, createdAt: ModelStringKeyConditionInput, sortDirection: ModelSortDirection, filter: ModelPhotoFilterInput, limit: Int, nextToken: String): ModelPhotoConnection @aws_iam @aws_cognito_user_pools
}

input ModelAlbumConditionInput {
  owner: ModelIDInput
  ownerId: ModelStringInput
  name: ModelStringInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelAlbumConditionInput]
  or: [ModelAlbumConditionInput]
  not: ModelAlbumConditionInput
}

input CreateAlbumInput {
  id: ID
  owner: ID!
  ownerId: String!
  name: String!
  createdAt: String
  updatedAt: String
}

input UpdateAlbumInput {
  id: ID!
  owner: ID
  ownerId: String
  name: String
  createdAt: String
  updatedAt: String
}

input DeleteAlbumInput {
  id: ID!
}

type Mutation {
  createAlbum(input: CreateAlbumInput!, condition: ModelAlbumConditionInput): Album @aws_iam @aws_cognito_user_pools
  updateAlbum(input: UpdateAlbumInput!, condition: ModelAlbumConditionInput): Album @aws_iam @aws_cognito_user_pools
  deleteAlbum(input: DeleteAlbumInput!, condition: ModelAlbumConditionInput): Album @aws_iam @aws_cognito_user_pools
  createPhoto(input: CreatePhotoInput!, condition: ModelPhotoConditionInput): Photo @aws_iam @aws_cognito_user_pools
  updatePhoto(input: UpdatePhotoInput!, condition: ModelPhotoConditionInput): Photo @aws_iam @aws_cognito_user_pools
  deletePhoto(input: DeletePhotoInput!, condition: ModelPhotoConditionInput): Photo @aws_iam @aws_cognito_user_pools
}

input ModelSubscriptionAlbumFilterInput {
  id: ModelSubscriptionIDInput
  ownerId: ModelSubscriptionStringInput
  name: ModelSubscriptionStringInput
  createdAt: ModelSubscriptionStringInput
  updatedAt: ModelSubscriptionStringInput
  and: [ModelSubscriptionAlbumFilterInput]
  or: [ModelSubscriptionAlbumFilterInput]
}

type Subscription {
  onCreateAlbum(filter: ModelSubscriptionAlbumFilterInput, owner: String): Album @aws_subscribe(mutations: ["createAlbum"]) @aws_iam @aws_cognito_user_pools
  onUpdateAlbum(filter: ModelSubscriptionAlbumFilterInput, owner: String): Album @aws_subscribe(mutations: ["updateAlbum"]) @aws_iam @aws_cognito_user_pools
  onDeleteAlbum(filter: ModelSubscriptionAlbumFilterInput, owner: String): Album @aws_subscribe(mutations: ["deleteAlbum"]) @aws_iam @aws_cognito_user_pools
  onCreatePhoto(filter: ModelSubscriptionPhotoFilterInput, owner: String): Photo @aws_subscribe(mutations: ["createPhoto"]) @aws_iam @aws_cognito_user_pools
  onUpdatePhoto(filter: ModelSubscriptionPhotoFilterInput, owner: String): Photo @aws_subscribe(mutations: ["updatePhoto"]) @aws_iam @aws_cognito_user_pools
  onDeletePhoto(filter: ModelSubscriptionPhotoFilterInput, owner: String): Photo @aws_subscribe(mutations: ["deletePhoto"]) @aws_iam @aws_cognito_user_pools
}

input S3ObjectInput {
  region: String!
  bucket: String!
  key: String!
}

input GPSInput {
  latitude: String!
  longitude: String!
  altitude: Float!
}

type ModelPhotoConnection @aws_iam @aws_cognito_user_pools {
  items: [Photo]!
  nextToken: String
}

input ModelPhotoFilterInput {
  id: ModelIDInput
  photoAlbumId: ModelIDInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  contentType: ModelStringInput
  height: ModelIntInput
  width: ModelIntInput
  size: ModelIntInput
  and: [ModelPhotoFilterInput]
  or: [ModelPhotoFilterInput]
  not: ModelPhotoFilterInput
}

input ModelPhotoConditionInput {
  photoAlbumId: ModelIDInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  contentType: ModelStringInput
  height: ModelIntInput
  width: ModelIntInput
  size: ModelIntInput
  and: [ModelPhotoConditionInput]
  or: [ModelPhotoConditionInput]
  not: ModelPhotoConditionInput
}

input CreatePhotoInput {
  id: ID
  photoAlbumId: ID!
  createdAt: String
  updatedAt: String
  fullsize: S3ObjectInput!
  thumbnail: S3ObjectInput
  contentType: String
  gps: GPSInput
  height: Int
  width: Int
  size: Int
}

input UpdatePhotoInput {
  id: ID!
  photoAlbumId: ID
  createdAt: String
  updatedAt: String
  fullsize: S3ObjectInput
  thumbnail: S3ObjectInput
  contentType: String
  gps: GPSInput
  height: Int
  width: Int
  size: Int
}

input DeletePhotoInput {
  id: ID!
}

input ModelSubscriptionPhotoFilterInput {
  id: ModelSubscriptionIDInput
  photoAlbumId: ModelSubscriptionIDInput
  createdAt: ModelSubscriptionStringInput
  updatedAt: ModelSubscriptionStringInput
  contentType: ModelSubscriptionStringInput
  height: ModelSubscriptionIntInput
  width: ModelSubscriptionIntInput
  size: ModelSubscriptionIntInput
  and: [ModelSubscriptionPhotoFilterInput]
  or: [ModelSubscriptionPhotoFilterInput]
}

input ModelStringKeyConditionInput {
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  between: [String]
  beginsWith: String
}

