{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { PersonalizeEventsClient } from \"./PersonalizeEventsClient\";\nimport { PutEventsCommand } from \"./commands/PutEventsCommand\";\nimport { PutItemsCommand } from \"./commands/PutItemsCommand\";\nimport { PutUsersCommand } from \"./commands/PutUsersCommand\";\n/**\n * <p>Amazon Personalize can consume real-time user event data, such as <i>stream</i> or <i>click</i> data, and use\n *       it for model training either alone or combined with historical data. For more information see <a>recording-events</a>.</p>\n */\nvar PersonalizeEvents = /** @class */function (_super) {\n  __extends(PersonalizeEvents, _super);\n  function PersonalizeEvents() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  PersonalizeEvents.prototype.putEvents = function (args, optionsOrCb, cb) {\n    var command = new PutEventsCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  PersonalizeEvents.prototype.putItems = function (args, optionsOrCb, cb) {\n    var command = new PutItemsCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  PersonalizeEvents.prototype.putUsers = function (args, optionsOrCb, cb) {\n    var command = new PutUsersCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(\"Expect http options but get \" + typeof optionsOrCb);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  };\n  return PersonalizeEvents;\n}(PersonalizeEventsClient);\nexport { PersonalizeEvents };","map":{"version":3,"mappings":";AAAA,SAASA,uBAAuB,QAAQ,2BAA2B;AACnE,SAASC,gBAAgB,QAAuD,6BAA6B;AAC7G,SAASC,eAAe,QAAqD,4BAA4B;AACzG,SAASC,eAAe,QAAqD,4BAA4B;AAGzG;;;;AAIA;EAAuCC;EAAvC;;EAgFA;EArESC,qCAAS,GAAhB,UACEC,IAA2B,EAC3BC,WAAwF,EACxFC,EAAsD;IAEtD,IAAMC,OAAO,GAAG,IAAIR,gBAAgB,CAACK,IAAI,CAAC;IAC1C,IAAI,OAAOC,WAAW,KAAK,UAAU,EAAE;MACrC,IAAI,CAACG,IAAI,CAACD,OAAO,EAAEF,WAAW,CAAC;KAChC,MAAM,IAAI,OAAOC,EAAE,KAAK,UAAU,EAAE;MACnC,IAAI,OAAOD,WAAW,KAAK,QAAQ,EAAE,MAAM,IAAII,KAAK,CAAC,iCAA+B,OAAOJ,WAAa,CAAC;MACzG,IAAI,CAACG,IAAI,CAACD,OAAO,EAAEF,WAAW,IAAI,EAAE,EAAEC,EAAE,CAAC;KAC1C,MAAM;MACL,OAAO,IAAI,CAACE,IAAI,CAACD,OAAO,EAAEF,WAAW,CAAC;;EAE1C,CAAC;EAaMF,oCAAQ,GAAf,UACEC,IAA0B,EAC1BC,WAAuF,EACvFC,EAAqD;IAErD,IAAMC,OAAO,GAAG,IAAIP,eAAe,CAACI,IAAI,CAAC;IACzC,IAAI,OAAOC,WAAW,KAAK,UAAU,EAAE;MACrC,IAAI,CAACG,IAAI,CAACD,OAAO,EAAEF,WAAW,CAAC;KAChC,MAAM,IAAI,OAAOC,EAAE,KAAK,UAAU,EAAE;MACnC,IAAI,OAAOD,WAAW,KAAK,QAAQ,EAAE,MAAM,IAAII,KAAK,CAAC,iCAA+B,OAAOJ,WAAa,CAAC;MACzG,IAAI,CAACG,IAAI,CAACD,OAAO,EAAEF,WAAW,IAAI,EAAE,EAAEC,EAAE,CAAC;KAC1C,MAAM;MACL,OAAO,IAAI,CAACE,IAAI,CAACD,OAAO,EAAEF,WAAW,CAAC;;EAE1C,CAAC;EAaMF,oCAAQ,GAAf,UACEC,IAA0B,EAC1BC,WAAuF,EACvFC,EAAqD;IAErD,IAAMC,OAAO,GAAG,IAAIN,eAAe,CAACG,IAAI,CAAC;IACzC,IAAI,OAAOC,WAAW,KAAK,UAAU,EAAE;MACrC,IAAI,CAACG,IAAI,CAACD,OAAO,EAAEF,WAAW,CAAC;KAChC,MAAM,IAAI,OAAOC,EAAE,KAAK,UAAU,EAAE;MACnC,IAAI,OAAOD,WAAW,KAAK,QAAQ,EAAE,MAAM,IAAII,KAAK,CAAC,iCAA+B,OAAOJ,WAAa,CAAC;MACzG,IAAI,CAACG,IAAI,CAACD,OAAO,EAAEF,WAAW,IAAI,EAAE,EAAEC,EAAE,CAAC;KAC1C,MAAM;MACL,OAAO,IAAI,CAACE,IAAI,CAACD,OAAO,EAAEF,WAAW,CAAC;;EAE1C,CAAC;EACH,wBAAC;AAAD,CAAC,CAhFsCP,uBAAuB","names":["PersonalizeEventsClient","PutEventsCommand","PutItemsCommand","PutUsersCommand","__extends","PersonalizeEvents","args","optionsOrCb","cb","command","send","Error"],"sourceRoot":"","sources":["../../PersonalizeEvents.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module","externalDependencies":[]}