{"ast":null,"code":"import { __awaiter, __generator, __read } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { Amplify, ConsoleLogger as Logger } from '@aws-amplify/core';\nimport { SumerianProvider } from './Providers/SumerianProvider';\nimport { XRProviderNotConfigured } from './Errors';\nvar logger = new Logger('XR');\nvar DEFAULT_PROVIDER_NAME = 'SumerianProvider';\nvar XRClass = /** @class */function () {\n  /**\n   * Initialize XR with AWS configurations\n   *\n   * @param {XROptions} options - Configuration object for XR\n   */\n  function XRClass(options) {\n    this._options = options;\n    logger.debug('XR Options', this._options);\n    this._defaultProvider = DEFAULT_PROVIDER_NAME;\n    this._pluggables = {};\n    // Add default provider\n    this.addPluggable(new SumerianProvider());\n  }\n  /**\n   * Configure XR part with configurations\n   *\n   * @param {XROptions} config - Configuration for XR\n   * @return {Object} - The current configuration\n   */\n  XRClass.prototype.configure = function (options) {\n    var _this = this;\n    var opt = options ? options.XR || options : {};\n    logger.debug('configure XR', {\n      opt: opt\n    });\n    this._options = Object.assign({}, this._options, opt);\n    Object.entries(this._pluggables).map(function (_a) {\n      var _b = __read(_a, 2),\n        name = _b[0],\n        provider = _b[1];\n      if (name === _this._defaultProvider && !opt[_this._defaultProvider]) {\n        provider.configure(_this._options);\n      } else {\n        provider.configure(_this._options[name]);\n      }\n    });\n    return this._options;\n  };\n  /**\n   * add plugin into XR category\n   * @param {Object} pluggable - an instance of the plugin\n   */\n  XRClass.prototype.addPluggable = function (pluggable) {\n    return __awaiter(this, void 0, void 0, function () {\n      var config;\n      return __generator(this, function (_a) {\n        if (pluggable && pluggable.getCategory() === 'XR') {\n          this._pluggables[pluggable.getProviderName()] = pluggable;\n          config = pluggable.configure(this._options);\n          return [2 /*return*/, config];\n        }\n        return [2 /*return*/];\n      });\n    });\n  };\n\n  XRClass.prototype.loadScene = function (sceneName, domElementId, sceneOptions, provider) {\n    if (sceneOptions === void 0) {\n      sceneOptions = {};\n    }\n    if (provider === void 0) {\n      provider = this._defaultProvider;\n    }\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!this._pluggables[provider]) throw new XRProviderNotConfigured(\"Provider '\" + provider + \"' not configured\");\n            return [4 /*yield*/, this._pluggables[provider].loadScene(sceneName, domElementId, sceneOptions)];\n          case 1:\n            return [2 /*return*/, _a.sent()];\n        }\n      });\n    });\n  };\n  XRClass.prototype.isSceneLoaded = function (sceneName, provider) {\n    if (provider === void 0) {\n      provider = this._defaultProvider;\n    }\n    if (!this._pluggables[provider]) throw new XRProviderNotConfigured(\"Provider '\" + provider + \"' not configured\");\n    return this._pluggables[provider].isSceneLoaded(sceneName);\n  };\n  XRClass.prototype.getSceneController = function (sceneName, provider) {\n    if (provider === void 0) {\n      provider = this._defaultProvider;\n    }\n    if (!this._pluggables[provider]) throw new XRProviderNotConfigured(\"Provider '\" + provider + \"' not configured\");\n    return this._pluggables[provider].getSceneController(sceneName);\n  };\n  XRClass.prototype.isVRCapable = function (sceneName, provider) {\n    if (provider === void 0) {\n      provider = this._defaultProvider;\n    }\n    if (!this._pluggables[provider]) throw new XRProviderNotConfigured(\"Provider '\" + provider + \"' not configured\");\n    return this._pluggables[provider].isVRCapable(sceneName);\n  };\n  XRClass.prototype.isVRPresentationActive = function (sceneName, provider) {\n    if (provider === void 0) {\n      provider = this._defaultProvider;\n    }\n    if (!this._pluggables[provider]) throw new XRProviderNotConfigured(\"Provider '\" + provider + \"' not configured\");\n    return this._pluggables[provider].isVRPresentationActive(sceneName);\n  };\n  XRClass.prototype.start = function (sceneName, provider) {\n    if (provider === void 0) {\n      provider = this._defaultProvider;\n    }\n    if (!this._pluggables[provider]) throw new XRProviderNotConfigured(\"Provider '\" + provider + \"' not configured\");\n    return this._pluggables[provider].start(sceneName);\n  };\n  XRClass.prototype.enterVR = function (sceneName, provider) {\n    if (provider === void 0) {\n      provider = this._defaultProvider;\n    }\n    if (!this._pluggables[provider]) throw new XRProviderNotConfigured(\"Provider '\" + provider + \"' not configured\");\n    return this._pluggables[provider].enterVR(sceneName);\n  };\n  XRClass.prototype.exitVR = function (sceneName, provider) {\n    if (provider === void 0) {\n      provider = this._defaultProvider;\n    }\n    if (!this._pluggables[provider]) throw new XRProviderNotConfigured(\"Provider '\" + provider + \"' not configured\");\n    return this._pluggables[provider].exitVR(sceneName);\n  };\n  XRClass.prototype.isMuted = function (sceneName, provider) {\n    if (provider === void 0) {\n      provider = this._defaultProvider;\n    }\n    if (!this._pluggables[provider]) throw new XRProviderNotConfigured(\"Provider '\" + provider + \"' not configured\");\n    return this._pluggables[provider].isMuted(sceneName);\n  };\n  XRClass.prototype.setMuted = function (sceneName, muted, provider) {\n    if (provider === void 0) {\n      provider = this._defaultProvider;\n    }\n    if (!this._pluggables[provider]) throw new XRProviderNotConfigured(\"Provider '\" + provider + \"' not configured\");\n    return this._pluggables[provider].setMuted(sceneName, muted);\n  };\n  XRClass.prototype.onSceneEvent = function (sceneName, eventName, eventHandler, provider) {\n    if (provider === void 0) {\n      provider = this._defaultProvider;\n    }\n    if (!this._pluggables[provider]) throw new XRProviderNotConfigured(\"Provider '\" + provider + \"' not configured\");\n    return this._pluggables[provider].onSceneEvent(sceneName, eventName, eventHandler);\n  };\n  XRClass.prototype.enableAudio = function (sceneName, provider) {\n    if (provider === void 0) {\n      provider = this._defaultProvider;\n    }\n    if (!this._pluggables[provider]) throw new XRProviderNotConfigured(\"Provider '\" + provider + \"' not configured\");\n    return this._pluggables[provider].enableAudio(sceneName);\n  };\n  return XRClass;\n}();\nexport { XRClass };\nexport var XR = new XRClass(null);\nAmplify.register(XR);","map":{"version":3,"mappings":"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","names":["Amplify","ConsoleLogger","Logger","SumerianProvider","XRProviderNotConfigured","logger","DEFAULT_PROVIDER_NAME","options","_options","debug","_defaultProvider","_pluggables","addPluggable","XRClass","opt","XR","Object","assign","entries","map","_a","_b","name","provider","_this","configure","pluggable","getCategory","getProviderName","config","sceneName","domElementId","sceneOptions","loadScene","isSceneLoaded","getSceneController","isVRCapable","isVRPresentationActive","start","enterVR","exitVR","isMuted","muted","setMuted","eventName","eventHandler","onSceneEvent","enableAudio","register"],"sourceRoot":"","sources":["../src/XR.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module","externalDependencies":[]}