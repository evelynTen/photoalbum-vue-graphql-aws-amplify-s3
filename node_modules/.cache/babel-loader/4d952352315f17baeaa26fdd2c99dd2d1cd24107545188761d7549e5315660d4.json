{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { __assign, __awaiter, __extends, __generator, __rest } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport * as Paho from 'paho-mqtt';\nimport { v4 as uuid } from 'uuid';\nimport Observable from 'zen-observable-ts';\nimport { AbstractPubSubProvider } from './PubSubProvider';\nimport { ConnectionState } from '../types/PubSub';\nimport { ConsoleLogger as Logger, Hub } from '@aws-amplify/core';\nimport { ConnectionStateMonitor, CONNECTION_CHANGE } from '../utils/ConnectionStateMonitor';\nimport { ReconnectEvent, ReconnectionMonitor } from '../utils/ReconnectionMonitor';\nimport { AMPLIFY_SYMBOL, CONNECTION_STATE_CHANGE } from './constants';\nvar logger = new Logger('MqttOverWSProvider');\nexport function mqttTopicMatch(filter, topic) {\n  var filterArray = filter.split('/');\n  var length = filterArray.length;\n  var topicArray = topic.split('/');\n  for (var i = 0; i < length; ++i) {\n    var left = filterArray[i];\n    var right = topicArray[i];\n    if (left === '#') return topicArray.length >= length;\n    if (left !== '+' && left !== right) return false;\n  }\n  return length === topicArray.length;\n}\nvar ClientsQueue = /** @class */function () {\n  function ClientsQueue() {\n    this.promises = new Map();\n  }\n  ClientsQueue.prototype.get = function (clientId, clientFactory) {\n    return __awaiter(this, void 0, void 0, function () {\n      var cachedPromise, newPromise;\n      var _this = this;\n      return __generator(this, function (_a) {\n        cachedPromise = this.promises.get(clientId);\n        if (cachedPromise) return [2 /*return*/, cachedPromise];\n        if (clientFactory) {\n          newPromise = clientFactory(clientId);\n          this.promises.set(clientId, newPromise);\n          newPromise.catch(function (v) {\n            return _this.promises.delete(clientId);\n          });\n          return [2 /*return*/, newPromise];\n        }\n        return [2 /*return*/, undefined];\n      });\n    });\n  };\n  Object.defineProperty(ClientsQueue.prototype, \"allClients\", {\n    get: function () {\n      return Array.from(this.promises.keys());\n    },\n    enumerable: true,\n    configurable: true\n  });\n  ClientsQueue.prototype.remove = function (clientId) {\n    this.promises.delete(clientId);\n  };\n  return ClientsQueue;\n}();\nvar dispatchPubSubEvent = function (event, data, message) {\n  Hub.dispatch('pubsub', {\n    event: event,\n    data: data,\n    message: message\n  }, 'PubSub', AMPLIFY_SYMBOL);\n};\nvar topicSymbol = typeof Symbol !== 'undefined' ? Symbol('topic') : '@@topic';\nvar MqttOverWSProvider = /** @class */function (_super) {\n  __extends(MqttOverWSProvider, _super);\n  function MqttOverWSProvider(options) {\n    if (options === void 0) {\n      options = {};\n    }\n    var _this = _super.call(this, __assign(__assign({}, options), {\n      clientId: options.clientId || uuid()\n    })) || this;\n    _this._clientsQueue = new ClientsQueue();\n    _this.connectionStateMonitor = new ConnectionStateMonitor();\n    _this.reconnectionMonitor = new ReconnectionMonitor();\n    _this._topicObservers = new Map();\n    _this._clientIdObservers = new Map();\n    // Monitor the connection health state and pass changes along to Hub\n    _this.connectionStateMonitor.connectionStateObservable.subscribe(function (connectionStateChange) {\n      dispatchPubSubEvent(CONNECTION_STATE_CHANGE, {\n        provider: _this,\n        connectionState: connectionStateChange\n      }, \"Connection state is \" + connectionStateChange);\n      _this.connectionState = connectionStateChange;\n      // Trigger reconnection when the connection is disrupted\n      if (connectionStateChange === ConnectionState.ConnectionDisrupted) {\n        _this.reconnectionMonitor.record(ReconnectEvent.START_RECONNECT);\n      } else if (connectionStateChange !== ConnectionState.Connecting) {\n        // Trigger connected to halt reconnection attempts\n        _this.reconnectionMonitor.record(ReconnectEvent.HALT_RECONNECT);\n      }\n    });\n    return _this;\n  }\n  Object.defineProperty(MqttOverWSProvider.prototype, \"clientId\", {\n    get: function () {\n      return this.options.clientId;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MqttOverWSProvider.prototype, \"endpoint\", {\n    get: function () {\n      return this.options.aws_pubsub_endpoint;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MqttOverWSProvider.prototype, \"clientsQueue\", {\n    get: function () {\n      return this._clientsQueue;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MqttOverWSProvider.prototype, \"isSSLEnabled\", {\n    get: function () {\n      return !this.options.aws_appsync_dangerously_connect_to_http_endpoint_for_testing;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  MqttOverWSProvider.prototype.getTopicForValue = function (value) {\n    return typeof value === 'object' && value[topicSymbol];\n  };\n  MqttOverWSProvider.prototype.getProviderName = function () {\n    return 'MqttOverWSProvider';\n  };\n  MqttOverWSProvider.prototype.onDisconnect = function (_a) {\n    var clientId = _a.clientId,\n      errorCode = _a.errorCode,\n      args = __rest(_a, [\"clientId\", \"errorCode\"]);\n    if (errorCode !== 0) {\n      logger.warn(clientId, JSON.stringify(__assign({\n        errorCode: errorCode\n      }, args), null, 2));\n      if (!clientId) {\n        return;\n      }\n      var clientIdObservers = this._clientIdObservers.get(clientId);\n      if (!clientIdObservers) {\n        return;\n      }\n      this.disconnect(clientId);\n    }\n  };\n  MqttOverWSProvider.prototype.newClient = function (_a) {\n    var url = _a.url,\n      clientId = _a.clientId;\n    return __awaiter(this, void 0, void 0, function () {\n      var client, connected;\n      var _this = this;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            logger.debug('Creating new MQTT client', clientId);\n            this.connectionStateMonitor.record(CONNECTION_CHANGE.OPENING_CONNECTION);\n            client = new Paho.Client(url, clientId);\n            client.onMessageArrived = function (_a) {\n              var topic = _a.destinationName,\n                msg = _a.payloadString;\n              _this._onMessage(topic, msg);\n            };\n            client.onConnectionLost = function (_a) {\n              var errorCode = _a.errorCode,\n                args = __rest(_a, [\"errorCode\"]);\n              _this.onDisconnect(__assign({\n                clientId: clientId,\n                errorCode: errorCode\n              }, args));\n              _this.connectionStateMonitor.record(CONNECTION_CHANGE.CLOSED);\n            };\n            return [4 /*yield*/, new Promise(function (resolve, reject) {\n              client.connect({\n                useSSL: _this.isSSLEnabled,\n                mqttVersion: 3,\n                onSuccess: function () {\n                  return resolve(true);\n                },\n                onFailure: function (x) {\n                  if (clientId) _this._clientsQueue.remove(clientId);\n                  _this.connectionStateMonitor.record(CONNECTION_CHANGE.CLOSED);\n                  resolve(false);\n                }\n              });\n            })];\n          case 1:\n            connected = _b.sent();\n            if (connected) {\n              this.connectionStateMonitor.record(CONNECTION_CHANGE.CONNECTION_ESTABLISHED);\n            }\n            return [2 /*return*/, client];\n        }\n      });\n    });\n  };\n  MqttOverWSProvider.prototype.connect = function (clientId, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    return __awaiter(this, void 0, void 0, function () {\n      var _this = this;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.clientsQueue.get(clientId, function (clientId) {\n              return __awaiter(_this, void 0, void 0, function () {\n                var client;\n                return __generator(this, function (_a) {\n                  switch (_a.label) {\n                    case 0:\n                      return [4 /*yield*/, this.newClient(__assign(__assign({}, options), {\n                        clientId: clientId\n                      }))];\n                    case 1:\n                      client = _a.sent();\n                      if (client) {\n                        // Once connected, subscribe to all topics registered observers\n                        this._topicObservers.forEach(function (_value, key) {\n                          client.subscribe(key);\n                        });\n                      }\n                      return [2 /*return*/, client];\n                  }\n                });\n              });\n            })];\n          case 1:\n            return [2 /*return*/, _a.sent()];\n        }\n      });\n    });\n  };\n  MqttOverWSProvider.prototype.disconnect = function (clientId) {\n    return __awaiter(this, void 0, void 0, function () {\n      var client;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.clientsQueue.get(clientId)];\n          case 1:\n            client = _a.sent();\n            if (client && client.isConnected()) {\n              client.disconnect();\n            }\n            this.clientsQueue.remove(clientId);\n            this.connectionStateMonitor.record(CONNECTION_CHANGE.CLOSED);\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  MqttOverWSProvider.prototype.publish = function (topics, msg) {\n    return __awaiter(this, void 0, void 0, function () {\n      var targetTopics, message, client;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            targetTopics = [].concat(topics);\n            message = JSON.stringify(msg);\n            return [4 /*yield*/, this.clientsQueue.get(this.clientId)];\n          case 1:\n            client = _a.sent();\n            if (client) {\n              logger.debug('Publishing to topic(s)', targetTopics.join(','), message);\n              targetTopics.forEach(function (topic) {\n                return client.send(topic, message);\n              });\n            } else {\n              logger.debug('Publishing to topic(s) failed', targetTopics.join(','), message);\n            }\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  MqttOverWSProvider.prototype._onMessage = function (topic, msg) {\n    try {\n      var matchedTopicObservers_1 = [];\n      this._topicObservers.forEach(function (observerForTopic, observerTopic) {\n        if (mqttTopicMatch(observerTopic, topic)) {\n          matchedTopicObservers_1.push(observerForTopic);\n        }\n      });\n      var parsedMessage_1 = JSON.parse(msg);\n      if (typeof parsedMessage_1 === 'object') {\n        parsedMessage_1[topicSymbol] = topic;\n      }\n      matchedTopicObservers_1.forEach(function (observersForTopic) {\n        observersForTopic.forEach(function (observer) {\n          return observer.next(parsedMessage_1);\n        });\n      });\n    } catch (error) {\n      logger.warn('Error handling message', error, msg);\n    }\n  };\n  MqttOverWSProvider.prototype.subscribe = function (topics, options) {\n    var _this = this;\n    if (options === void 0) {\n      options = {};\n    }\n    var targetTopics = [].concat(topics);\n    logger.debug('Subscribing to topic(s)', targetTopics.join(','));\n    var reconnectSubscription;\n    return new Observable(function (observer) {\n      targetTopics.forEach(function (topic) {\n        // this._topicObservers is used to notify the observers according to the topic received on the message\n        var observersForTopic = _this._topicObservers.get(topic);\n        if (!observersForTopic) {\n          observersForTopic = new Set();\n          _this._topicObservers.set(topic, observersForTopic);\n        }\n        observersForTopic.add(observer);\n      });\n      var _a = options.clientId,\n        clientId = _a === void 0 ? _this.clientId : _a;\n      // this._clientIdObservers is used to close observers when client gets disconnected\n      var observersForClientId = _this._clientIdObservers.get(clientId);\n      if (!observersForClientId) {\n        observersForClientId = new Set();\n      }\n      observersForClientId.add(observer);\n      _this._clientIdObservers.set(clientId, observersForClientId);\n      (function () {\n        return __awaiter(_this, void 0, void 0, function () {\n          var getClient;\n          var _this = this;\n          return __generator(this, function (_a) {\n            switch (_a.label) {\n              case 0:\n                getClient = function () {\n                  return __awaiter(_this, void 0, void 0, function () {\n                    var _a, url, _b, client_1, e_1;\n                    return __generator(this, function (_c) {\n                      switch (_c.label) {\n                        case 0:\n                          _c.trys.push([0, 5,, 6]);\n                          _a = options.url;\n                          if (!(_a === void 0)) return [3 /*break*/, 2];\n                          return [4 /*yield*/, this.endpoint];\n                        case 1:\n                          _b = _c.sent();\n                          return [3 /*break*/, 3];\n                        case 2:\n                          _b = _a;\n                          _c.label = 3;\n                        case 3:\n                          url = _b;\n                          return [4 /*yield*/, this.connect(clientId, {\n                            url: url\n                          })];\n                        case 4:\n                          client_1 = _c.sent();\n                          if (client_1 !== undefined) {\n                            targetTopics.forEach(function (topic) {\n                              client_1.subscribe(topic);\n                            });\n                          }\n                          return [3 /*break*/, 6];\n                        case 5:\n                          e_1 = _c.sent();\n                          logger.debug('Error forming connection', e_1);\n                          return [3 /*break*/, 6];\n                        case 6:\n                          return [2 /*return*/];\n                      }\n                    });\n                  });\n                };\n                // Establish the initial connection\n                return [4 /*yield*/, getClient()];\n              case 1:\n                // Establish the initial connection\n                _a.sent();\n                // Add an observable to the reconnection list to manage reconnection for this subscription\n                reconnectSubscription = new Observable(function (observer) {\n                  _this.reconnectionMonitor.addObserver(observer);\n                }).subscribe(function () {\n                  getClient();\n                });\n                return [2 /*return*/];\n            }\n          });\n        });\n      })();\n\n      return function () {\n        return __awaiter(_this, void 0, void 0, function () {\n          var client;\n          var _this = this;\n          var _a, _b;\n          return __generator(this, function (_c) {\n            switch (_c.label) {\n              case 0:\n                return [4 /*yield*/, this.clientsQueue.get(clientId)];\n              case 1:\n                client = _c.sent();\n                reconnectSubscription === null || reconnectSubscription === void 0 ? void 0 : reconnectSubscription.unsubscribe();\n                if (client) {\n                  (_a = this._clientIdObservers.get(clientId)) === null || _a === void 0 ? void 0 : _a.delete(observer);\n                  // No more observers per client => client not needed anymore\n                  if (((_b = this._clientIdObservers.get(clientId)) === null || _b === void 0 ? void 0 : _b.size) === 0) {\n                    this.disconnect(clientId);\n                    this.connectionStateMonitor.record(CONNECTION_CHANGE.CLOSING_CONNECTION);\n                    this._clientIdObservers.delete(clientId);\n                  }\n                  targetTopics.forEach(function (topic) {\n                    var observersForTopic = _this._topicObservers.get(topic) || new Set();\n                    observersForTopic.delete(observer);\n                    // if no observers exists for the topic, topic should be removed\n                    if (observersForTopic.size === 0) {\n                      _this._topicObservers.delete(topic);\n                      if (client.isConnected()) {\n                        client.unsubscribe(topic);\n                      }\n                    }\n                  });\n                }\n                return [2 /*return*/, null];\n            }\n          });\n        });\n      };\n    });\n  };\n  return MqttOverWSProvider;\n}(AbstractPubSubProvider);\nexport { MqttOverWSProvider };","map":{"version":3,"mappings":"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","names":["Paho","v4","uuid","Observable","AbstractPubSubProvider","ConnectionState","ConsoleLogger","Logger","Hub","ConnectionStateMonitor","CONNECTION_CHANGE","ReconnectEvent","ReconnectionMonitor","AMPLIFY_SYMBOL","CONNECTION_STATE_CHANGE","logger","mqttTopicMatch","filter","topic","filterArray","split","length","topicArray","i","left","right","Map","ClientsQueue","clientId","clientFactory","cachedPromise","promises","get","newPromise","set","catch","delete","undefined","Object","Array","from","keys","dispatchPubSubEvent","event","data","message","dispatch","topicSymbol","Symbol","__extends","options","_super","_this","connectionStateMonitor","connectionStateObservable","subscribe","provider","connectionState","connectionStateChange","ConnectionDisrupted","reconnectionMonitor","record","START_RECONNECT","Connecting","HALT_RECONNECT","MqttOverWSProvider","aws_pubsub_endpoint","_clientsQueue","aws_appsync_dangerously_connect_to_http_endpoint_for_testing","value","_a","errorCode","args","warn","JSON","stringify","clientIdObservers","_clientIdObservers","disconnect","url","debug","OPENING_CONNECTION","client","Client","onMessageArrived","msg","_onMessage","onConnectionLost","onDisconnect","CLOSED","Promise","resolve","reject","connect","useSSL","isSSLEnabled","mqttVersion","onSuccess","onFailure","remove","connected","_b","CONNECTION_ESTABLISHED","clientsQueue","newClient","_topicObservers","forEach","_value","key","isConnected","topics","targetTopics","concat","join","send","matchedTopicObservers_1","observerForTopic","observerTopic","push","parsedMessage_1","parse","observersForTopic","next","error","reconnectSubscription","Set","add","observer","observersForClientId","getClient","endpoint","client_1","_c","e_1","addObserver","unsubscribe","size","CLOSING_CONNECTION"],"sourceRoot":"","sources":["../../src/Providers/MqttOverWSProvider.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module","externalDependencies":[]}