{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nvar ModelSortPredicateCreator = /** @class */function () {\n  function ModelSortPredicateCreator() {}\n  ModelSortPredicateCreator.createPredicateBuilder = function (modelDefinition) {\n    var modelName = modelDefinition.name;\n    var fieldNames = new Set(Object.keys(modelDefinition.fields));\n    var handler;\n    var predicate = new Proxy({}, handler = {\n      get: function (_target, propertyKey, receiver) {\n        var field = propertyKey;\n        if (!fieldNames.has(field)) {\n          throw new Error(\"Invalid field for model. field: \" + field + \", model: \" + modelName);\n        }\n        var result = function (sortDirection) {\n          var _a;\n          (_a = ModelSortPredicateCreator.sortPredicateGroupsMap.get(receiver)) === null || _a === void 0 ? void 0 : _a.push({\n            field: field,\n            sortDirection: sortDirection\n          });\n          return receiver;\n        };\n        return result;\n      }\n    });\n    ModelSortPredicateCreator.sortPredicateGroupsMap.set(predicate, []);\n    return predicate;\n  };\n  ModelSortPredicateCreator.isValidPredicate = function (predicate) {\n    return ModelSortPredicateCreator.sortPredicateGroupsMap.has(predicate);\n  };\n  ModelSortPredicateCreator.getPredicates = function (predicate, throwOnInvalid) {\n    if (throwOnInvalid === void 0) {\n      throwOnInvalid = true;\n    }\n    if (throwOnInvalid && !ModelSortPredicateCreator.isValidPredicate(predicate)) {\n      throw new Error('The predicate is not valid');\n    }\n    var predicateGroup = ModelSortPredicateCreator.sortPredicateGroupsMap.get(predicate);\n    if (predicateGroup) {\n      return predicateGroup;\n    } else {\n      throw new Error('Predicate group not found');\n    }\n  };\n  // transforms cb-style predicate into Proxy\n  ModelSortPredicateCreator.createFromExisting = function (modelDefinition, existing) {\n    if (!existing || !modelDefinition) {\n      return undefined;\n    }\n    return existing(ModelSortPredicateCreator.createPredicateBuilder(modelDefinition));\n  };\n  ModelSortPredicateCreator.sortPredicateGroupsMap = new WeakMap();\n  return ModelSortPredicateCreator;\n}();\nexport { ModelSortPredicateCreator };","map":{"version":3,"mappings":";AASA;EAAA,sCAiFA;EA3EgBA,gDAAsB,GAArC,UACCC,eAA4B;IAEpB,oCAAe;IACvB,IAAMC,UAAU,GAAG,IAAIC,GAAG,CAAUC,MAAM,CAACC,IAAI,CAACJ,eAAe,CAACK,MAAM,CAAC,CAAC;IAExE,IAAIC,OAAuC;IAC3C,IAAMC,SAAS,GAAG,IAAIC,KAAK,CAC1B,EAAsB,EACrBF,OAAO,GAAG;MACVG,GAAG,EAAH,UAAIC,OAAO,EAAEC,WAAW,EAAEC,QAA0B;QACnD,IAAMC,KAAK,GAAGF,WAAsB;QAEpC,IAAI,CAACV,UAAU,CAACa,GAAG,CAACD,KAAK,CAAC,EAAE;UAC3B,MAAM,IAAIE,KAAK,CACd,qCAAmCF,KAAK,iBAAYG,SAAW,CAC/D;;QAGF,IAAMC,MAAM,GAAG,UAACC,aAA4B;;UAC3C,+BAAyB,CAACC,sBAAsB,CAC9CV,GAAG,CAACG,QAAQ,CAAC,0CACZQ,IAAI,CAAC;YAAEP,KAAK;YAAEK,aAAa;UAAA,CAAE;UAEhC,OAAON,QAAQ;QAChB,CAAC;QACD,OAAOK,MAAM;MACd;KACA,CACD;IAEDlB,yBAAyB,CAACoB,sBAAsB,CAACE,GAAG,CAACd,SAAS,EAAE,EAAE,CAAC;IAEnE,OAAOA,SAAS;EACjB,CAAC;EAEMR,0CAAgB,GAAvB,UACCQ,SAAc;IAEd,OAAOR,yBAAyB,CAACoB,sBAAsB,CAACL,GAAG,CAACP,SAAS,CAAC;EACvE,CAAC;EAEMR,uCAAa,GAApB,UACCQ,SAA2B,EAC3Be,cAA8B;IAA9B;MAAAA,qBAA8B;IAAA;IAE9B,IACCA,cAAc,IACd,CAACvB,yBAAyB,CAACwB,gBAAgB,CAAChB,SAAS,CAAC,EACrD;MACD,MAAM,IAAIQ,KAAK,CAAC,4BAA4B,CAAC;;IAG9C,IAAMS,cAAc,GACnBzB,yBAAyB,CAACoB,sBAAsB,CAACV,GAAG,CAACF,SAAS,CAAC;IAChE,IAAIiB,cAAc,EAAE;MACnB,OAAOA,cAAc;KACrB,MAAM;MACN,MAAM,IAAIT,KAAK,CAAC,2BAA2B,CAAC;;EAE9C,CAAC;EAED;EACOhB,4CAAkB,GAAzB,UACCC,eAA4B,EAC5ByB,QAAkC;IAElC,IAAI,CAACA,QAAQ,IAAI,CAACzB,eAAe,EAAE;MAClC,OAAO0B,SAAS;;IAGjB,OAAOD,QAAQ,CACd1B,yBAAyB,CAAC4B,sBAAsB,CAAC3B,eAAe,CAAC,CACjE;EACF,CAAC;EA/EcD,gDAAsB,GAAG,IAAI6B,OAAO,EAGhD;EA6EJ,gCAAC;CAAA,EAjFD;SAAa7B,yBAAyB","names":["ModelSortPredicateCreator","modelDefinition","fieldNames","Set","Object","keys","fields","handler","predicate","Proxy","get","_target","propertyKey","receiver","field","has","Error","modelName","result","sortDirection","sortPredicateGroupsMap","push","set","throwOnInvalid","isValidPredicate","predicateGroup","existing","undefined","createPredicateBuilder","WeakMap"],"sourceRoot":"","sources":["../../src/predicates/sort.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module","externalDependencies":[]}