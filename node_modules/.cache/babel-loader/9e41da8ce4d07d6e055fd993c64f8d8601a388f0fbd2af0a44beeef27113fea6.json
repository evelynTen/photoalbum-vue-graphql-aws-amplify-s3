{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { __assign, __awaiter, __extends, __generator, __values } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { ConsoleLogger as Logger, Signer, Credentials, Constants } from '@aws-amplify/core';\nimport { AbstractXRProvider } from './XRProvider';\nimport { XRNoSceneConfiguredError, XRSceneNotFoundError, XRSceneNotLoadedError, XRNoDomElement, XRSceneLoadFailure } from '../Errors';\nvar SUMERIAN_SERVICE_NAME = 'sumerian';\nvar logger = new Logger('SumerianProvider');\nvar SumerianProvider = /** @class */function (_super) {\n  __extends(SumerianProvider, _super);\n  function SumerianProvider(options) {\n    if (options === void 0) {\n      options = {};\n    }\n    return _super.call(this, options) || this;\n  }\n  SumerianProvider.prototype.getProviderName = function () {\n    return 'SumerianProvider';\n  };\n  SumerianProvider.prototype.loadScript = function (url) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2 /*return*/, new Promise(function (resolve, reject) {\n          var scriptElement = document.createElement('script');\n          scriptElement.src = url;\n          scriptElement.addEventListener('load', function (event) {\n            resolve();\n          });\n          scriptElement.addEventListener('error', function (event) {\n            reject(new Error(\"Failed to load script: \" + url));\n          });\n          document.head.appendChild(scriptElement);\n        })];\n      });\n    });\n  };\n  SumerianProvider.prototype.loadScene = function (sceneName, domElementId, sceneOptions) {\n    return __awaiter(this, void 0, void 0, function () {\n      var errorMsg, errorMsg, element, errorMsg, scene, errorMsg, sceneUrl, sceneId, sceneRegion, errorMsg, awsSDKConfigOverride, fetchOptions, url, credentials, accessInfo, serviceInfo, request, e_1, apiResponse, apiResponseJson, sceneBundleData, sceneBundle, sceneBundleJson, error_1, progressCallback, publishParamOverrides, sceneLoadParams, sceneController, _a, _b, warning;\n      var e_2, _c;\n      return __generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            if (!sceneName) {\n              errorMsg = 'No scene name passed into loadScene';\n              logger.error(errorMsg);\n              throw new XRSceneLoadFailure(errorMsg);\n            }\n            if (!domElementId) {\n              errorMsg = 'No dom element id passed into loadScene';\n              logger.error(errorMsg);\n              throw new XRNoDomElement(errorMsg);\n            }\n            element = document.getElementById(domElementId);\n            if (!element) {\n              errorMsg = \"DOM element id, \" + domElementId + \" not found\";\n              logger.error(errorMsg);\n              throw new XRNoDomElement(errorMsg);\n            }\n            scene = this.getScene(sceneName);\n            if (!scene.sceneConfig) {\n              errorMsg = \"No scene config configured for scene: \" + sceneName;\n              logger.error(errorMsg);\n              throw new XRSceneLoadFailure(errorMsg);\n            }\n            sceneUrl = scene.sceneConfig.url;\n            sceneId = scene.sceneConfig.sceneId;\n            if (scene.sceneConfig.hasOwnProperty('region')) {\n              // Use the scene region on the Sumerian scene configuration\n              sceneRegion = scene.sceneConfig.region;\n            } else if (this.options.hasOwnProperty('region')) {\n              // Use the scene region on the XR category configuration\n              sceneRegion = this.options.region;\n            } else {\n              errorMsg = \"No region configured for scene: \" + sceneName;\n              logger.error(errorMsg);\n              throw new XRSceneLoadFailure(errorMsg);\n            }\n            awsSDKConfigOverride = {\n              region: sceneRegion,\n              // This is passed to the AWS clients created in\n              // Sumerian's AwsSystem\n              // This helps other services(like Lex and Polly) to track\n              // traffic coming from Sumerian scenes embedded with Amplify\n              customUserAgent: Constants.userAgent + \"-SumerianScene\"\n            };\n            fetchOptions = {\n              headers: {\n                // This sets the AWS user agent string\n                // So the Sumerian service knows this request is\n                // from Amplify\n                'X-Amz-User-Agent': Constants.userAgent\n              }\n            };\n            url = sceneUrl;\n            _d.label = 1;\n          case 1:\n            _d.trys.push([1, 3,, 4]);\n            return [4 /*yield*/, Credentials.get()];\n          case 2:\n            credentials = _d.sent();\n            awsSDKConfigOverride['credentials'] = credentials;\n            accessInfo = {\n              secret_key: credentials.secretAccessKey,\n              access_key: credentials.accessKeyId,\n              session_token: credentials.sessionToken\n            };\n            serviceInfo = {\n              region: sceneRegion,\n              service: SUMERIAN_SERVICE_NAME\n            };\n            request = Signer.sign({\n              method: 'GET',\n              url: sceneUrl\n            }, accessInfo, serviceInfo);\n            fetchOptions.headers = __assign(__assign({}, fetchOptions.headers), request.headers);\n            url = request.url;\n            return [3 /*break*/, 4];\n          case 3:\n            e_1 = _d.sent();\n            logger.debug('No credentials available, the request will be unsigned');\n            return [3 /*break*/, 4];\n          case 4:\n            return [4 /*yield*/, fetch(url, fetchOptions)];\n          case 5:\n            apiResponse = _d.sent();\n            return [4 /*yield*/, apiResponse.json()];\n          case 6:\n            apiResponseJson = _d.sent();\n            if (apiResponse.status === 403) {\n              if (apiResponseJson.message) {\n                logger.error(\"Failure to authenticate user: \" + apiResponseJson.message);\n                throw new XRSceneLoadFailure(\"Failure to authenticate user: \" + apiResponseJson.message);\n              } else {\n                logger.error(\"Failure to authenticate user\");\n                throw new XRSceneLoadFailure(\"Failure to authenticate user\");\n              }\n            }\n            sceneBundleData = apiResponseJson.bundleData[sceneId];\n            return [4 /*yield*/, fetch(sceneBundleData.url, {\n              headers: sceneBundleData.headers\n            })];\n          case 7:\n            sceneBundle = _d.sent();\n            return [4 /*yield*/, sceneBundle.json()];\n          case 8:\n            sceneBundleJson = _d.sent();\n            _d.label = 9;\n          case 9:\n            _d.trys.push([9, 11,, 12]);\n            // Load the Sumerian bootstrapper script into the DOM\n            return [4 /*yield*/, this.loadScript(sceneBundleJson[sceneId].bootstrapperUrl)];\n          case 10:\n            // Load the Sumerian bootstrapper script into the DOM\n            _d.sent();\n            return [3 /*break*/, 12];\n          case 11:\n            error_1 = _d.sent();\n            logger.error(error_1);\n            throw new XRSceneLoadFailure(error_1);\n          case 12:\n            progressCallback = sceneOptions.progressCallback ? sceneOptions.progressCallback : undefined;\n            publishParamOverrides = scene.publishParamOverrides ? scene.publishParamOverrides : undefined;\n            sceneLoadParams = {\n              element: element,\n              sceneId: sceneId,\n              sceneBundle: sceneBundleJson,\n              apiResponse: apiResponseJson,\n              progressCallback: progressCallback,\n              publishParamOverrides: publishParamOverrides,\n              awsSDKConfigOverride: awsSDKConfigOverride\n            };\n            return [4 /*yield*/, window.SumerianBootstrapper.loadScene(sceneLoadParams)];\n          case 13:\n            sceneController = _d.sent();\n            scene.sceneController = sceneController;\n            scene.isLoaded = true;\n            try {\n              // Log scene warnings\n              for (_a = __values(sceneController.sceneLoadWarnings), _b = _a.next(); !_b.done; _b = _a.next()) {\n                warning = _b.value;\n                logger.warn(\"loadScene warning: \" + warning);\n              }\n            } catch (e_2_1) {\n              e_2 = {\n                error: e_2_1\n              };\n            } finally {\n              try {\n                if (_b && !_b.done && (_c = _a.return)) _c.call(_a);\n              } finally {\n                if (e_2) throw e_2.error;\n              }\n            }\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  SumerianProvider.prototype.isSceneLoaded = function (sceneName) {\n    var scene = this.getScene(sceneName);\n    return scene.isLoaded || false;\n  };\n  SumerianProvider.prototype.getScene = function (sceneName) {\n    if (!this.options.scenes) {\n      var errorMsg = 'No scenes were defined in the configuration';\n      logger.error(errorMsg);\n      throw new XRNoSceneConfiguredError(errorMsg);\n    }\n    if (!sceneName) {\n      var errorMsg = 'No scene name was passed';\n      logger.error(errorMsg);\n      throw new XRSceneNotFoundError(errorMsg);\n    }\n    if (!this.options.scenes[sceneName]) {\n      var errorMsg = \"Scene '\" + sceneName + \"' is not configured\";\n      logger.error(errorMsg);\n      throw new XRSceneNotFoundError(errorMsg);\n    }\n    return this.options.scenes[sceneName];\n  };\n  SumerianProvider.prototype.getSceneController = function (sceneName) {\n    if (!this.options.scenes) {\n      var errorMsg = 'No scenes were defined in the configuration';\n      logger.error(errorMsg);\n      throw new XRNoSceneConfiguredError(errorMsg);\n    }\n    var scene = this.options.scenes[sceneName];\n    if (!scene) {\n      var errorMsg = \"Scene '\" + sceneName + \"' is not configured\";\n      logger.error(errorMsg);\n      throw new XRSceneNotFoundError(errorMsg);\n    }\n    var sceneController = scene.sceneController;\n    if (!sceneController) {\n      var errorMsg = \"Scene controller for '\" + sceneName + \"' has not been loaded\";\n      logger.error(errorMsg);\n      throw new XRSceneNotLoadedError(errorMsg);\n    }\n    return sceneController;\n  };\n  SumerianProvider.prototype.isVRCapable = function (sceneName) {\n    var sceneController = this.getSceneController(sceneName);\n    return sceneController.vrCapable;\n  };\n  SumerianProvider.prototype.isVRPresentationActive = function (sceneName) {\n    var sceneController = this.getSceneController(sceneName);\n    return sceneController.vrPresentationActive;\n  };\n  SumerianProvider.prototype.start = function (sceneName) {\n    var sceneController = this.getSceneController(sceneName);\n    sceneController.start();\n  };\n  SumerianProvider.prototype.enterVR = function (sceneName) {\n    var sceneController = this.getSceneController(sceneName);\n    sceneController.enterVR();\n  };\n  SumerianProvider.prototype.exitVR = function (sceneName) {\n    var sceneController = this.getSceneController(sceneName);\n    sceneController.exitVR();\n  };\n  SumerianProvider.prototype.isMuted = function (sceneName) {\n    var sceneController = this.getSceneController(sceneName);\n    return sceneController.muted;\n  };\n  SumerianProvider.prototype.setMuted = function (sceneName, muted) {\n    var sceneController = this.getSceneController(sceneName);\n    sceneController.muted = muted;\n  };\n  SumerianProvider.prototype.onSceneEvent = function (sceneName, eventName, eventHandler) {\n    var sceneController = this.getSceneController(sceneName);\n    sceneController.on(eventName, eventHandler);\n  };\n  SumerianProvider.prototype.enableAudio = function (sceneName) {\n    var sceneController = this.getSceneController(sceneName);\n    sceneController.enableAudio();\n  };\n  return SumerianProvider;\n}(AbstractXRProvider);\nexport { SumerianProvider };","map":{"version":3,"mappings":"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","names":["ConsoleLogger","Logger","Signer","Credentials","Constants","AbstractXRProvider","XRNoSceneConfiguredError","XRSceneNotFoundError","XRSceneNotLoadedError","XRNoDomElement","XRSceneLoadFailure","SUMERIAN_SERVICE_NAME","logger","__extends","options","_super","SumerianProvider","url","Promise","resolve","reject","scriptElement","document","createElement","src","addEventListener","Error","head","appendChild","sceneName","domElementId","sceneOptions","errorMsg","error","element","getElementById","scene","getScene","sceneConfig","sceneUrl","sceneId","hasOwnProperty","sceneRegion","region","awsSDKConfigOverride","customUserAgent","userAgent","fetchOptions","headers","get","credentials","_d","accessInfo","secret_key","secretAccessKey","access_key","accessKeyId","session_token","sessionToken","serviceInfo","service","request","sign","method","debug","fetch","apiResponse","json","apiResponseJson","status","message","sceneBundleData","bundleData","sceneBundle","sceneBundleJson","loadScript","bootstrapperUrl","error_1","progressCallback","undefined","publishParamOverrides","sceneLoadParams","window","SumerianBootstrapper","loadScene","sceneController","isLoaded","_a","sceneLoadWarnings","warning","warn","scenes","getSceneController","vrCapable","vrPresentationActive","start","enterVR","exitVR","muted","eventName","eventHandler","on","enableAudio"],"sourceRoot":"","sources":["../../src/Providers/SumerianProvider.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module","externalDependencies":[]}