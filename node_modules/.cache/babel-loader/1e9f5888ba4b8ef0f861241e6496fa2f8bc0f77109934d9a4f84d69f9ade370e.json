{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { __extends, __values } from \"tslib\";\nimport { CacheList, defaultConfig, getCurrTime, CacheObject } from './Utils';\nimport { StorageCache } from './StorageCache';\nimport { ConsoleLogger as Logger } from '@aws-amplify/core';\nvar logger = new Logger('InMemoryCache');\n/**\n * Customized in-memory cache with LRU implemented\n * @member cacheObj - object which store items\n * @member cacheList - list of keys in the cache with LRU\n * @member curSizeInBytes - current size of the cache\n * @member maxPriority - max of the priority\n * @member cacheSizeLimit - the limit of cache size\n */\nvar InMemoryCacheClass = /** @class */function (_super) {\n  __extends(InMemoryCacheClass, _super);\n  /**\n   * initialize the cache\n   *\n   * @param config - the configuration of the cache\n   */\n  function InMemoryCacheClass(config) {\n    var _this = this;\n    var cacheConfig = config ? Object.assign({}, defaultConfig, config) : defaultConfig;\n    _this = _super.call(this, cacheConfig) || this;\n    logger.debug('now we start!');\n    _this.cacheList = [];\n    _this.curSizeInBytes = 0;\n    _this.maxPriority = 5;\n    _this.getItem = _this.getItem.bind(_this);\n    _this.setItem = _this.setItem.bind(_this);\n    _this.removeItem = _this.removeItem.bind(_this);\n    // initialize list for every priority\n    for (var i = 0; i < _this.maxPriority; i += 1) {\n      _this.cacheList[i] = new CacheList();\n    }\n    return _this;\n  }\n  /**\n   * decrease current size of the cache\n   *\n   * @param amount - the amount of the cache size which needs to be decreased\n   */\n  InMemoryCacheClass.prototype._decreaseCurSizeInBytes = function (amount) {\n    this.curSizeInBytes -= amount;\n  };\n  /**\n   * increase current size of the cache\n   *\n   * @param amount - the amount of the cache szie which need to be increased\n   */\n  InMemoryCacheClass.prototype._increaseCurSizeInBytes = function (amount) {\n    this.curSizeInBytes += amount;\n  };\n  /**\n   * check whether item is expired\n   *\n   * @param key - the key of the item\n   *\n   * @return true if the item is expired.\n   */\n  InMemoryCacheClass.prototype._isExpired = function (key) {\n    var text = CacheObject.getItem(key);\n    var item = JSON.parse(text);\n    if (getCurrTime() >= item.expires) {\n      return true;\n    }\n    return false;\n  };\n  /**\n   * delete item from cache\n   *\n   * @param prefixedKey - the key of the item\n   * @param listIdx - indicates which cache list the key belongs to\n   */\n  InMemoryCacheClass.prototype._removeItem = function (prefixedKey, listIdx) {\n    // delete the key from the list\n    this.cacheList[listIdx].removeItem(prefixedKey);\n    // decrease the current size of the cache\n    this._decreaseCurSizeInBytes(JSON.parse(CacheObject.getItem(prefixedKey)).byteSize);\n    // finally remove the item from memory\n    CacheObject.removeItem(prefixedKey);\n  };\n  /**\n   * put item into cache\n   *\n   * @param prefixedKey - the key of the item\n   * @param itemData - the value of the item\n   * @param itemSizeInBytes - the byte size of the item\n   * @param listIdx - indicates which cache list the key belongs to\n   */\n  InMemoryCacheClass.prototype._setItem = function (prefixedKey, item, listIdx) {\n    // insert the key into the list\n    this.cacheList[listIdx].insertItem(prefixedKey);\n    // increase the current size of the cache\n    this._increaseCurSizeInBytes(item.byteSize);\n    // finally add the item into memory\n    CacheObject.setItem(prefixedKey, JSON.stringify(item));\n  };\n  /**\n   * see whether cache is full\n   *\n   * @param itemSize\n   *\n   * @return true if cache is full\n   */\n  InMemoryCacheClass.prototype._isCacheFull = function (itemSize) {\n    return this.curSizeInBytes + itemSize > this.config.capacityInBytes;\n  };\n  /**\n   * check whether the cache contains the key\n   *\n   * @param key\n   */\n  InMemoryCacheClass.prototype.containsKey = function (key) {\n    var prefixedKey = this.config.keyPrefix + key;\n    for (var i = 0; i < this.maxPriority; i += 1) {\n      if (this.cacheList[i].containsKey(prefixedKey)) {\n        return i + 1;\n      }\n    }\n    return -1;\n  };\n  /**\n   * * Set item into cache. You can put number, string, boolean or object.\n   * The cache will first check whether has the same key.\n   * If it has, it will delete the old item and then put the new item in\n   * The cache will pop out items if it is full\n   * You can specify the cache item options. The cache will abort and output a warning:\n   * If the key is invalid\n   * If the size of the item exceeds itemMaxSize.\n   * If the value is undefined\n   * If incorrect cache item configuration\n   * If error happened with browser storage\n   *\n   * @param key - the key of the item\n   * @param value - the value of the item\n   * @param options - optional, the specified meta-data\n   *\n   * @throws if the item is too big which exceeds the limit of single item size\n   * @throws if the key is invalid\n   */\n  InMemoryCacheClass.prototype.setItem = function (key, value, options) {\n    var prefixedKey = this.config.keyPrefix + key;\n    // invalid keys\n    if (prefixedKey === this.config.keyPrefix || prefixedKey === this.cacheCurSizeKey) {\n      logger.warn(\"Invalid key: should not be empty or 'CurSize'\");\n      return;\n    }\n    if (typeof value === 'undefined') {\n      logger.warn(\"The value of item should not be undefined!\");\n      return;\n    }\n    var cacheItemOptions = {\n      priority: options && options.priority !== undefined ? options.priority : this.config.defaultPriority,\n      expires: options && options.expires !== undefined ? options.expires : this.config.defaultTTL + getCurrTime()\n    };\n    if (cacheItemOptions.priority < 1 || cacheItemOptions.priority > 5) {\n      logger.warn(\"Invalid parameter: priority due to out or range. It should be within 1 and 5.\");\n      return;\n    }\n    var item = this.fillCacheItem(prefixedKey, value, cacheItemOptions);\n    // check wether this item is too big;\n    if (item.byteSize > this.config.itemMaxSize) {\n      logger.warn(\"Item with key: \" + key + \" you are trying to put into is too big!\");\n      return;\n    }\n    // if key already in the cache, then delete it.\n    var presentKeyPrio = this.containsKey(key);\n    if (presentKeyPrio !== -1) {\n      this._removeItem(prefixedKey, presentKeyPrio - 1);\n    }\n    // pop out items in the cache when cache is full based on LRU\n    // first start from lowest priority cache list\n    var cacheListIdx = this.maxPriority - 1;\n    while (this._isCacheFull(item.byteSize) && cacheListIdx >= 0) {\n      if (!this.cacheList[cacheListIdx].isEmpty()) {\n        var popedItemKey = this.cacheList[cacheListIdx].getLastItem();\n        this._removeItem(popedItemKey, cacheListIdx);\n      } else {\n        cacheListIdx -= 1;\n      }\n    }\n    this._setItem(prefixedKey, item, Number(item.priority) - 1);\n  };\n  /**\n   * Get item from cache. It will return null if item doesnâ€™t exist or it has been expired.\n   * If you specified callback function in the options,\n   * then the function will be executed if no such item in the cache\n   * and finally put the return value into cache.\n   * Please make sure the callback function will return the value you want to put into the cache.\n   * The cache will abort output a warning:\n   * If the key is invalid\n   *\n   * @param key - the key of the item\n   * @param options - the options of callback function\n   */\n  InMemoryCacheClass.prototype.getItem = function (key, options) {\n    var ret = null;\n    var prefixedKey = this.config.keyPrefix + key;\n    if (prefixedKey === this.config.keyPrefix || prefixedKey === this.cacheCurSizeKey) {\n      logger.warn(\"Invalid key: should not be empty or 'CurSize'\");\n      return null;\n    }\n    // check whether it's in the cachelist\n    var presentKeyPrio = this.containsKey(key);\n    if (presentKeyPrio !== -1) {\n      if (this._isExpired(prefixedKey)) {\n        // if expired, remove that item and return null\n        this._removeItem(prefixedKey, presentKeyPrio - 1);\n      } else {\n        // if not expired, great, return the value and refresh it\n        ret = CacheObject.getItem(prefixedKey);\n        var item = JSON.parse(ret);\n        this.cacheList[item.priority - 1].refresh(prefixedKey);\n        return item.data;\n      }\n    }\n    if (options && options.callback !== undefined) {\n      var val = options.callback();\n      if (val !== null) {\n        this.setItem(key, val, options);\n      }\n      return val;\n    }\n    return null;\n  };\n  /**\n   * remove item from the cache\n   *\n   * @param key - the key of the item\n   */\n  InMemoryCacheClass.prototype.removeItem = function (key) {\n    var prefixedKey = this.config.keyPrefix + key;\n    // check if the key is in the cache\n    var presentKeyPrio = this.containsKey(key);\n    if (presentKeyPrio !== -1) {\n      this._removeItem(prefixedKey, presentKeyPrio - 1);\n    }\n  };\n  /**\n   * clear the entire cache\n   */\n  InMemoryCacheClass.prototype.clear = function () {\n    var e_1, _a;\n    for (var i = 0; i < this.maxPriority; i += 1) {\n      try {\n        for (var _b = (e_1 = void 0, __values(this.cacheList[i].getKeys())), _c = _b.next(); !_c.done; _c = _b.next()) {\n          var key = _c.value;\n          this._removeItem(key, i);\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n    }\n  };\n  /**\n   * Return all the keys in the cache.\n   */\n  InMemoryCacheClass.prototype.getAllKeys = function () {\n    var e_2, _a;\n    var keys = [];\n    for (var i = 0; i < this.maxPriority; i += 1) {\n      try {\n        for (var _b = (e_2 = void 0, __values(this.cacheList[i].getKeys())), _c = _b.next(); !_c.done; _c = _b.next()) {\n          var key = _c.value;\n          keys.push(key.substring(this.config.keyPrefix.length));\n        }\n      } catch (e_2_1) {\n        e_2 = {\n          error: e_2_1\n        };\n      } finally {\n        try {\n          if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        } finally {\n          if (e_2) throw e_2.error;\n        }\n      }\n    }\n    return keys;\n  };\n  /**\n   * return the current size of the cache\n   *\n   * @return the current size of the cache\n   */\n  InMemoryCacheClass.prototype.getCacheCurSize = function () {\n    return this.curSizeInBytes;\n  };\n  /**\n   * Return a new instance of cache with customized configuration.\n   * @param config - the customized configuration\n   */\n  InMemoryCacheClass.prototype.createInstance = function (config) {\n    return new InMemoryCacheClass(config);\n  };\n  return InMemoryCacheClass;\n}(StorageCache);\nexport { InMemoryCacheClass };\nexport var InMemoryCache = new InMemoryCacheClass();","map":{"version":3,"mappings":"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","names":["CacheList","defaultConfig","getCurrTime","CacheObject","StorageCache","ConsoleLogger","Logger","logger","__extends","config","cacheConfig","Object","assign","_this","debug","cacheList","curSizeInBytes","maxPriority","getItem","bind","setItem","removeItem","i","InMemoryCacheClass","amount","key","text","item","JSON","parse","expires","prefixedKey","listIdx","_decreaseCurSizeInBytes","byteSize","insertItem","_increaseCurSizeInBytes","stringify","itemSize","capacityInBytes","keyPrefix","containsKey","value","options","cacheCurSizeKey","warn","cacheItemOptions","priority","undefined","defaultPriority","defaultTTL","fillCacheItem","itemMaxSize","presentKeyPrio","_removeItem","cacheListIdx","_isCacheFull","isEmpty","popedItemKey","getLastItem","_setItem","Number","ret","_isExpired","refresh","data","callback","val","getKeys","keys","push","substring","length","InMemoryCache"],"sourceRoot":"","sources":["../src/InMemoryCache.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module","externalDependencies":[]}