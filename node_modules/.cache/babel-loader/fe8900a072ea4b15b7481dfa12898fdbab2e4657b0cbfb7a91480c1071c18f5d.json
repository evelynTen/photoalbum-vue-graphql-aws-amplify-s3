{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { __assign, __awaiter, __generator, __read, __spread } from \"tslib\";\nimport { API, GRAPHQL_AUTH_MODE } from '@aws-amplify/api';\nimport { Auth } from '@aws-amplify/auth';\nimport { Cache } from '@aws-amplify/cache';\nimport { ConsoleLogger as Logger, Hub, BackgroundProcessManager } from '@aws-amplify/core';\nimport { CONTROL_MSG as PUBSUB_CONTROL_MSG } from '@aws-amplify/pubsub';\nimport Observable from 'zen-observable-ts';\nimport { ProcessName } from '../../types';\nimport { buildSubscriptionGraphQLOperation, getAuthorizationRules, getModelAuthModes, getUserGroupsFromToken, TransformerMutationType, getTokenForCustomAuth } from '../utils';\nimport { ModelPredicateCreator } from '../../predicates';\nimport { validatePredicate, USER_AGENT_SUFFIX_DATASTORE } from '../../util';\nimport { getSubscriptionErrorType } from './errorMaps';\nvar logger = new Logger('DataStore');\nexport var CONTROL_MSG;\n(function (CONTROL_MSG) {\n  CONTROL_MSG[\"CONNECTED\"] = \"CONNECTED\";\n})(CONTROL_MSG || (CONTROL_MSG = {}));\nexport var USER_CREDENTIALS;\n(function (USER_CREDENTIALS) {\n  USER_CREDENTIALS[USER_CREDENTIALS[\"none\"] = 0] = \"none\";\n  USER_CREDENTIALS[USER_CREDENTIALS[\"unauth\"] = 1] = \"unauth\";\n  USER_CREDENTIALS[USER_CREDENTIALS[\"auth\"] = 2] = \"auth\";\n})(USER_CREDENTIALS || (USER_CREDENTIALS = {}));\nvar SubscriptionProcessor = /** @class */function () {\n  function SubscriptionProcessor(schema, syncPredicates, amplifyConfig, authModeStrategy, errorHandler, amplifyContext) {\n    if (amplifyConfig === void 0) {\n      amplifyConfig = {};\n    }\n    if (amplifyContext === void 0) {\n      amplifyContext = {\n        Auth: Auth,\n        API: API,\n        Cache: Cache\n      };\n    }\n    this.schema = schema;\n    this.syncPredicates = syncPredicates;\n    this.amplifyConfig = amplifyConfig;\n    this.authModeStrategy = authModeStrategy;\n    this.errorHandler = errorHandler;\n    this.amplifyContext = amplifyContext;\n    this.typeQuery = new WeakMap();\n    this.buffer = [];\n    this.runningProcesses = new BackgroundProcessManager();\n  }\n  SubscriptionProcessor.prototype.buildSubscription = function (namespace, model, transformerMutationType, userCredentials, cognitoTokenPayload, oidcTokenPayload, authMode) {\n    var aws_appsync_authenticationType = this.amplifyConfig.aws_appsync_authenticationType;\n    var _a = this.getAuthorizationInfo(model, userCredentials, aws_appsync_authenticationType, cognitoTokenPayload, oidcTokenPayload, authMode) || {},\n      isOwner = _a.isOwner,\n      ownerField = _a.ownerField,\n      ownerValue = _a.ownerValue;\n    var _b = __read(buildSubscriptionGraphQLOperation(namespace, model, transformerMutationType, isOwner, ownerField), 3),\n      opType = _b[0],\n      opName = _b[1],\n      query = _b[2];\n    return {\n      authMode: authMode,\n      opType: opType,\n      opName: opName,\n      query: query,\n      isOwner: isOwner,\n      ownerField: ownerField,\n      ownerValue: ownerValue\n    };\n  };\n  SubscriptionProcessor.prototype.getAuthorizationInfo = function (model, userCredentials, defaultAuthType, cognitoTokenPayload, oidcTokenPayload, authMode) {\n    if (cognitoTokenPayload === void 0) {\n      cognitoTokenPayload = {};\n    }\n    if (oidcTokenPayload === void 0) {\n      oidcTokenPayload = {};\n    }\n    var rules = getAuthorizationRules(model);\n    // Return null if user doesn't have proper credentials for private API with IAM auth\n    var iamPrivateAuth = authMode === GRAPHQL_AUTH_MODE.AWS_IAM && rules.find(function (rule) {\n      return rule.authStrategy === 'private' && rule.provider === 'iam';\n    });\n    if (iamPrivateAuth && userCredentials === USER_CREDENTIALS.unauth) {\n      return null;\n    }\n    // Group auth should take precedence over owner auth, so we are checking\n    // if rule(s) have group authorization as well as if either the Cognito or\n    // OIDC token has a groupClaim. If so, we are returning auth info before\n    // any further owner-based auth checks.\n    var groupAuthRules = rules.filter(function (rule) {\n      return rule.authStrategy === 'groups' && ['userPools', 'oidc'].includes(rule.provider);\n    });\n    var validGroup = (authMode === GRAPHQL_AUTH_MODE.AMAZON_COGNITO_USER_POOLS || authMode === GRAPHQL_AUTH_MODE.OPENID_CONNECT) && groupAuthRules.find(function (groupAuthRule) {\n      // validate token against groupClaim\n      var cognitoUserGroups = getUserGroupsFromToken(cognitoTokenPayload, groupAuthRule);\n      var oidcUserGroups = getUserGroupsFromToken(oidcTokenPayload, groupAuthRule);\n      return __spread(cognitoUserGroups, oidcUserGroups).find(function (userGroup) {\n        return groupAuthRule.groups.find(function (group) {\n          return group === userGroup;\n        });\n      });\n    });\n    if (validGroup) {\n      return {\n        authMode: authMode,\n        isOwner: false\n      };\n    }\n    // Owner auth needs additional values to be returned in order to create the subscription with\n    // the correct parameters so we are getting the owner value from the Cognito token via the\n    // identityClaim from the auth rule.\n    var cognitoOwnerAuthRules = authMode === GRAPHQL_AUTH_MODE.AMAZON_COGNITO_USER_POOLS ? rules.filter(function (rule) {\n      return rule.authStrategy === 'owner' && rule.provider === 'userPools';\n    }) : [];\n    var ownerAuthInfo;\n    cognitoOwnerAuthRules.forEach(function (ownerAuthRule) {\n      var ownerValue = cognitoTokenPayload[ownerAuthRule.identityClaim];\n      if (ownerValue) {\n        ownerAuthInfo = {\n          authMode: GRAPHQL_AUTH_MODE.AMAZON_COGNITO_USER_POOLS,\n          isOwner: ownerAuthRule.areSubscriptionsPublic ? false : true,\n          ownerField: ownerAuthRule.ownerField,\n          ownerValue: ownerValue\n        };\n      }\n    });\n    if (ownerAuthInfo) {\n      return ownerAuthInfo;\n    }\n    // Owner auth needs additional values to be returned in order to create the subscription with\n    // the correct parameters so we are getting the owner value from the OIDC token via the\n    // identityClaim from the auth rule.\n    var oidcOwnerAuthRules = authMode === GRAPHQL_AUTH_MODE.OPENID_CONNECT ? rules.filter(function (rule) {\n      return rule.authStrategy === 'owner' && rule.provider === 'oidc';\n    }) : [];\n    oidcOwnerAuthRules.forEach(function (ownerAuthRule) {\n      var ownerValue = oidcTokenPayload[ownerAuthRule.identityClaim];\n      if (ownerValue) {\n        ownerAuthInfo = {\n          authMode: GRAPHQL_AUTH_MODE.OPENID_CONNECT,\n          isOwner: ownerAuthRule.areSubscriptionsPublic ? false : true,\n          ownerField: ownerAuthRule.ownerField,\n          ownerValue: ownerValue\n        };\n      }\n    });\n    if (ownerAuthInfo) {\n      return ownerAuthInfo;\n    }\n    // Fallback: return authMode or default auth type\n    return {\n      authMode: authMode || defaultAuthType,\n      isOwner: false\n    };\n  };\n  SubscriptionProcessor.prototype.hubQueryCompletionListener = function (completed, capsule) {\n    var event = capsule.payload.event;\n    if (event === PUBSUB_CONTROL_MSG.SUBSCRIPTION_ACK) {\n      completed();\n    }\n  };\n  SubscriptionProcessor.prototype.start = function () {\n    var _this = this;\n    this.runningProcesses = this.runningProcesses || new BackgroundProcessManager();\n    var ctlObservable = new Observable(function (observer) {\n      var promises = [];\n      // Creating subs for each model/operation combo so they can be unsubscribed\n      // independently, since the auth retry behavior is asynchronous.\n      var subscriptions = {};\n      var cognitoTokenPayload, oidcTokenPayload;\n      var userCredentials = USER_CREDENTIALS.none;\n      _this.runningProcesses.add(function () {\n        return __awaiter(_this, void 0, void 0, function () {\n          var credentials, err_1, session, err_2, _a, aws_cognito_region, AuthConfig, token, federatedInfo, currentUser, payload, err_3;\n          var _this = this;\n          return __generator(this, function (_b) {\n            switch (_b.label) {\n              case 0:\n                _b.trys.push([0, 2,, 3]);\n                return [4 /*yield*/, this.amplifyContext.Auth.currentCredentials()];\n              case 1:\n                credentials = _b.sent();\n                userCredentials = credentials.authenticated ? USER_CREDENTIALS.auth : USER_CREDENTIALS.unauth;\n                return [3 /*break*/, 3];\n              case 2:\n                err_1 = _b.sent();\n                return [3 /*break*/, 3];\n              case 3:\n                _b.trys.push([3, 5,, 6]);\n                return [4 /*yield*/, this.amplifyContext.Auth.currentSession()];\n              case 4:\n                session = _b.sent();\n                cognitoTokenPayload = session.getIdToken().decodePayload();\n                return [3 /*break*/, 6];\n              case 5:\n                err_2 = _b.sent();\n                return [3 /*break*/, 6];\n              case 6:\n                _b.trys.push([6, 11,, 12]);\n                _a = this.amplifyConfig, aws_cognito_region = _a.aws_cognito_region, AuthConfig = _a.Auth;\n                if (!aws_cognito_region || AuthConfig && !AuthConfig.region) {\n                  throw 'Auth is not configured';\n                }\n                token = void 0;\n                return [4 /*yield*/, this.amplifyContext.Cache.getItem('federatedInfo')];\n              case 7:\n                federatedInfo = _b.sent();\n                if (!federatedInfo) return [3 /*break*/, 8];\n                token = federatedInfo.token;\n                return [3 /*break*/, 10];\n              case 8:\n                return [4 /*yield*/, this.amplifyContext.Auth.currentAuthenticatedUser()];\n              case 9:\n                currentUser = _b.sent();\n                if (currentUser) {\n                  token = currentUser.token;\n                }\n                _b.label = 10;\n              case 10:\n                if (token) {\n                  payload = token.split('.')[1];\n                  oidcTokenPayload = JSON.parse(Buffer.from(payload, 'base64').toString('utf8'));\n                }\n                return [3 /*break*/, 12];\n              case 11:\n                err_3 = _b.sent();\n                logger.debug('error getting OIDC JWT', err_3);\n                return [3 /*break*/, 12];\n              case 12:\n                Object.values(this.schema.namespaces).forEach(function (namespace) {\n                  Object.values(namespace.models).filter(function (_a) {\n                    var syncable = _a.syncable;\n                    return syncable;\n                  }).forEach(function (modelDefinition) {\n                    return _this.runningProcesses.isOpen && _this.runningProcesses.add(function () {\n                      return __awaiter(_this, void 0, void 0, function () {\n                        var modelAuthModes, readAuthModes, operations, operationAuthModeAttempts, authModeRetry;\n                        var _a, _b, _c;\n                        var _this = this;\n                        return __generator(this, function (_d) {\n                          switch (_d.label) {\n                            case 0:\n                              return [4 /*yield*/, getModelAuthModes({\n                                authModeStrategy: this.authModeStrategy,\n                                defaultAuthMode: this.amplifyConfig.aws_appsync_authenticationType,\n                                modelName: modelDefinition.name,\n                                schema: this.schema\n                              })];\n                            case 1:\n                              modelAuthModes = _d.sent();\n                              readAuthModes = modelAuthModes.READ;\n                              subscriptions = __assign(__assign({}, subscriptions), (_a = {}, _a[modelDefinition.name] = (_b = {}, _b[TransformerMutationType.CREATE] = [], _b[TransformerMutationType.UPDATE] = [], _b[TransformerMutationType.DELETE] = [], _b), _a));\n                              operations = [TransformerMutationType.CREATE, TransformerMutationType.UPDATE, TransformerMutationType.DELETE];\n                              operationAuthModeAttempts = (_c = {}, _c[TransformerMutationType.CREATE] = 0, _c[TransformerMutationType.UPDATE] = 0, _c[TransformerMutationType.DELETE] = 0, _c);\n                              authModeRetry = function (operation) {\n                                return __awaiter(_this, void 0, void 0, function () {\n                                  var _a, transformerMutationType, opName, query, isOwner, ownerField, ownerValue, authMode, authToken, variables, userAgentSuffix, queryObservable, subscriptionReadyCallback;\n                                  var _this = this;\n                                  return __generator(this, function (_b) {\n                                    switch (_b.label) {\n                                      case 0:\n                                        _a = this.buildSubscription(namespace, modelDefinition, operation, userCredentials, cognitoTokenPayload, oidcTokenPayload, readAuthModes[operationAuthModeAttempts[operation]]), transformerMutationType = _a.opType, opName = _a.opName, query = _a.query, isOwner = _a.isOwner, ownerField = _a.ownerField, ownerValue = _a.ownerValue, authMode = _a.authMode;\n                                        return [4 /*yield*/, getTokenForCustomAuth(authMode, this.amplifyConfig)];\n                                      case 1:\n                                        authToken = _b.sent();\n                                        variables = {};\n                                        if (isOwner) {\n                                          if (!ownerValue) {\n                                            observer.error('Owner field required, sign in is needed in order to perform this operation');\n                                            return [2 /*return*/];\n                                          }\n\n                                          variables[ownerField] = ownerValue;\n                                        }\n                                        logger.debug(\"Attempting \" + operation + \" subscription with authMode: \" + readAuthModes[operationAuthModeAttempts[operation]]);\n                                        userAgentSuffix = USER_AGENT_SUFFIX_DATASTORE;\n                                        queryObservable = this.amplifyContext.API.graphql(__assign(__assign({\n                                          query: query,\n                                          variables: variables\n                                        }, {\n                                          authMode: authMode\n                                        }), {\n                                          authToken: authToken,\n                                          userAgentSuffix: userAgentSuffix\n                                        }));\n                                        // TODO: consider onTerminate.then(() => API.cancel(...))\n                                        subscriptions[modelDefinition.name][transformerMutationType].push(queryObservable.map(function (_a) {\n                                          var value = _a.value;\n                                          return value;\n                                        }).subscribe({\n                                          next: function (_a) {\n                                            var data = _a.data,\n                                              errors = _a.errors;\n                                            if (Array.isArray(errors) && errors.length > 0) {\n                                              var messages = errors.map(function (_a) {\n                                                var message = _a.message;\n                                                return message;\n                                              });\n                                              logger.warn(\"Skipping incoming subscription. Messages: \" + messages.join('\\n'));\n                                              _this.drainBuffer();\n                                              return;\n                                            }\n                                            var predicatesGroup = ModelPredicateCreator.getPredicates(_this.syncPredicates.get(modelDefinition), false);\n                                            // @ts-ignore\n                                            var _b = data,\n                                              _c = opName,\n                                              record = _b[_c];\n                                            // checking incoming subscription against syncPredicate.\n                                            // once AppSync implements filters on subscriptions, we'll be\n                                            // able to set these when establishing the subscription instead.\n                                            // Until then, we'll need to filter inbound\n                                            if (_this.passesPredicateValidation(record, predicatesGroup)) {\n                                              _this.pushToBuffer(transformerMutationType, modelDefinition, record);\n                                            }\n                                            _this.drainBuffer();\n                                          },\n                                          error: function (subscriptionError) {\n                                            return __awaiter(_this, void 0, void 0, function () {\n                                              var _a, _b, _c, _d, message, e_1;\n                                              return __generator(this, function (_e) {\n                                                switch (_e.label) {\n                                                  case 0:\n                                                    _a = subscriptionError.error, _b = __read((_a === void 0 ? {\n                                                      errors: []\n                                                    } : _a).errors, 1), _c = _b[0], _d = (_c === void 0 ? {} : _c).message, message = _d === void 0 ? '' : _d;\n                                                    if (message.includes(PUBSUB_CONTROL_MSG.REALTIME_SUBSCRIPTION_INIT_ERROR) || message.includes(PUBSUB_CONTROL_MSG.CONNECTION_FAILED)) {\n                                                      // Unsubscribe and clear subscription array for model/operation\n                                                      subscriptions[modelDefinition.name][transformerMutationType].forEach(function (subscription) {\n                                                        return subscription.unsubscribe();\n                                                      });\n                                                      subscriptions[modelDefinition.name][transformerMutationType] = [];\n                                                      operationAuthModeAttempts[operation]++;\n                                                      if (operationAuthModeAttempts[operation] >= readAuthModes.length) {\n                                                        // last auth mode retry. Continue with error\n                                                        logger.debug(operation + \" subscription failed with authMode: \" + readAuthModes[operationAuthModeAttempts[operation] - 1]);\n                                                      } else {\n                                                        // retry with different auth mode. Do not trigger\n                                                        // observer error or error handler\n                                                        logger.debug(operation + \" subscription failed with authMode: \" + readAuthModes[operationAuthModeAttempts[operation] - 1] + \". Retrying with authMode: \" + readAuthModes[operationAuthModeAttempts[operation]]);\n                                                        authModeRetry(operation);\n                                                        return [2 /*return*/];\n                                                      }\n                                                    }\n\n                                                    logger.warn('subscriptionError', message);\n                                                    _e.label = 1;\n                                                  case 1:\n                                                    _e.trys.push([1, 3,, 4]);\n                                                    return [4 /*yield*/, this.errorHandler({\n                                                      recoverySuggestion: 'Ensure app code is up to date, auth directives exist and are correct on each model, and that server-side data has not been invalidated by a schema change. If the problem persists, search for or create an issue: https://github.com/aws-amplify/amplify-js/issues',\n                                                      localModel: null,\n                                                      message: message,\n                                                      model: modelDefinition.name,\n                                                      operation: operation,\n                                                      errorType: getSubscriptionErrorType(subscriptionError),\n                                                      process: ProcessName.subscribe,\n                                                      remoteModel: null,\n                                                      cause: subscriptionError\n                                                    })];\n                                                  case 2:\n                                                    _e.sent();\n                                                    return [3 /*break*/, 4];\n                                                  case 3:\n                                                    e_1 = _e.sent();\n                                                    logger.error('Subscription error handler failed with:', e_1);\n                                                    return [3 /*break*/, 4];\n                                                  case 4:\n                                                    if (typeof subscriptionReadyCallback === 'function') {\n                                                      subscriptionReadyCallback();\n                                                    }\n                                                    if (message.includes('\"errorType\":\"Unauthorized\"') || message.includes('\"errorType\":\"OperationDisabled\"')) {\n                                                      return [2 /*return*/];\n                                                    }\n\n                                                    observer.error(message);\n                                                    return [2 /*return*/];\n                                                }\n                                              });\n                                            });\n                                          }\n                                        }));\n\n                                        promises.push(function () {\n                                          return __awaiter(_this, void 0, void 0, function () {\n                                            var boundFunction;\n                                            var _this = this;\n                                            return __generator(this, function (_a) {\n                                              switch (_a.label) {\n                                                case 0:\n                                                  return [4 /*yield*/, new Promise(function (res) {\n                                                    subscriptionReadyCallback = res;\n                                                    boundFunction = _this.hubQueryCompletionListener.bind(_this, res);\n                                                    Hub.listen('api', boundFunction);\n                                                  })];\n                                                case 1:\n                                                  _a.sent();\n                                                  Hub.remove('api', boundFunction);\n                                                  return [2 /*return*/];\n                                              }\n                                            });\n                                          });\n                                        }());\n\n                                        return [2 /*return*/];\n                                    }\n                                  });\n                                });\n                              };\n\n                              operations.forEach(function (op) {\n                                return authModeRetry(op);\n                              });\n                              return [2 /*return*/];\n                          }\n                        });\n                      });\n                    });\n                  });\n                });\n\n                this.runningProcesses.isOpen && this.runningProcesses.add(function () {\n                  return Promise.all(promises).then(function () {\n                    observer.next(CONTROL_MSG.CONNECTED);\n                  });\n                });\n                return [2 /*return*/];\n            }\n          });\n        });\n      }, 'subscription processor new subscriber');\n      return _this.runningProcesses.addCleaner(function () {\n        return __awaiter(_this, void 0, void 0, function () {\n          return __generator(this, function (_a) {\n            Object.keys(subscriptions).forEach(function (modelName) {\n              subscriptions[modelName][TransformerMutationType.CREATE].forEach(function (subscription) {\n                return subscription.unsubscribe();\n              });\n              subscriptions[modelName][TransformerMutationType.UPDATE].forEach(function (subscription) {\n                return subscription.unsubscribe();\n              });\n              subscriptions[modelName][TransformerMutationType.DELETE].forEach(function (subscription) {\n                return subscription.unsubscribe();\n              });\n            });\n            return [2 /*return*/];\n          });\n        });\n      });\n    });\n\n    var dataObservable = new Observable(function (observer) {\n      _this.dataObserver = observer;\n      _this.drainBuffer();\n      return _this.runningProcesses.addCleaner(function () {\n        return __awaiter(_this, void 0, void 0, function () {\n          return __generator(this, function (_a) {\n            this.dataObserver = null;\n            return [2 /*return*/];\n          });\n        });\n      });\n    });\n\n    return [ctlObservable, dataObservable];\n  };\n  SubscriptionProcessor.prototype.stop = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.runningProcesses.close()];\n          case 1:\n            _a.sent();\n            return [4 /*yield*/, this.runningProcesses.open()];\n          case 2:\n            _a.sent();\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  SubscriptionProcessor.prototype.passesPredicateValidation = function (record, predicatesGroup) {\n    if (!predicatesGroup) {\n      return true;\n    }\n    var predicates = predicatesGroup.predicates,\n      type = predicatesGroup.type;\n    return validatePredicate(record, type, predicates);\n  };\n  SubscriptionProcessor.prototype.pushToBuffer = function (transformerMutationType, modelDefinition, data) {\n    this.buffer.push([transformerMutationType, modelDefinition, data]);\n  };\n  SubscriptionProcessor.prototype.drainBuffer = function () {\n    var _this = this;\n    if (this.dataObserver) {\n      this.buffer.forEach(function (data) {\n        return _this.dataObserver.next(data);\n      });\n      this.buffer = [];\n    }\n  };\n  return SubscriptionProcessor;\n}();\nexport { SubscriptionProcessor };","map":{"version":3,"mappings":"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","names":["API","GRAPHQL_AUTH_MODE","Auth","Cache","ConsoleLogger","Logger","Hub","BackgroundProcessManager","CONTROL_MSG","PUBSUB_CONTROL_MSG","Observable","ProcessName","buildSubscriptionGraphQLOperation","getAuthorizationRules","getModelAuthModes","getUserGroupsFromToken","TransformerMutationType","getTokenForCustomAuth","ModelPredicateCreator","validatePredicate","USER_AGENT_SUFFIX_DATASTORE","getSubscriptionErrorType","logger","USER_CREDENTIALS","schema","syncPredicates","amplifyConfig","authModeStrategy","errorHandler","amplifyContext","WeakMap","SubscriptionProcessor","namespace","model","transformerMutationType","userCredentials","cognitoTokenPayload","oidcTokenPayload","authMode","isOwner","ownerField","ownerValue","opType","opName","query","defaultAuthType","rules","iamPrivateAuth","AWS_IAM","find","authStrategy","rule","provider","unauth","groupAuthRules","filter","includes","validGroup","AMAZON_COGNITO_USER_POOLS","OPENID_CONNECT","cognitoUserGroups","groupAuthRule","oidcUserGroups","__spread","groups","userGroup","cognitoOwnerAuthRules","ownerAuthInfo","forEach","ownerAuthRule","identityClaim","areSubscriptionsPublic","oidcOwnerAuthRules","completed","capsule","event","SUBSCRIPTION_ACK","runningProcesses","ctlObservable","promises","subscriptions","none","_this","add","currentCredentials","credentials","_b","authenticated","auth","currentSession","session","getIdToken","decodePayload","_a","aws_cognito_region","AuthConfig","region","token","getItem","federatedInfo","currentAuthenticatedUser","currentUser","payload","split","JSON","parse","Buffer","from","toString","debug","err_3","Object","values","namespaces","models","syncable","isOpen","defaultAuthMode","aws_appsync_authenticationType","modelName","modelDefinition","name","modelAuthModes","_d","readAuthModes","READ","CREATE","UPDATE","DELETE","operations","operationAuthModeAttempts","_c","authModeRetry","operation","buildSubscription","authToken","variables","observer","error","userAgentSuffix","queryObservable","graphql","push","map","value","subscribe","next","data","errors","Array","isArray","length","messages","message","warn","join","drainBuffer","predicatesGroup","getPredicates","get","record","passesPredicateValidation","pushToBuffer","subscriptionError","REALTIME_SUBSCRIPTION_INIT_ERROR","CONNECTION_FAILED","unsubscribe","recoverySuggestion","localModel","errorType","process","remoteModel","cause","_e","e_1","subscriptionReadyCallback","Promise","res","boundFunction","hubQueryCompletionListener","bind","listen","remove","op","all","then","CONNECTED","addCleaner","keys","dataObservable","dataObserver","close","open","type","predicates","buffer"],"sourceRoot":"","sources":["../../../src/sync/processors/subscription.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module","externalDependencies":[]}