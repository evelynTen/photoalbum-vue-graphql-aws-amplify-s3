{"ast":null,"code":"import { API, graphqlOperation, Storage } from \"aws-amplify\";\nimport { createAlbum as createAlbumMutation } from \"@/graphql/mutations\";\nimport { getAlbum as getAlbumQuery } from \"@/graphql/queries\";\nimport { listAlbums as listAlbumsQuery } from \"@/graphql/queries\";\nimport { createPhoto as createPhotoMutation } from \"@/graphql/mutations\";\n// import { uuid } from \"uuidv4\";\nimport { v4 as uuid } from 'uuid';\nimport awsconfig from \"@/aws-exports\";\nexport const albumInfo = {\n  namespaced: true,\n  state: {\n    albums: null\n  },\n  mutations: {\n    setAlbums(state, payload) {\n      state.albums = payload;\n    }\n  },\n  actions: {\n    async createAlbum({\n      dispatch\n    }, newAlbum) {\n      try {\n        await API.graphql(graphqlOperation(createAlbumMutation, {\n          input: newAlbum\n        }));\n        dispatch(\"getAlbumsData\");\n      } catch (error) {\n        console.error(\"createalbum\", error);\n      }\n    },\n    async getAlbum(_, albumId) {\n      return await API.graphql(graphqlOperation(getAlbumQuery, {\n        id: albumId\n      }));\n    },\n    async getAlbumsData({\n      commit\n    }) {\n      const albumsData = await API.graphql(graphqlOperation(listAlbumsQuery));\n      commit(\"setAlbums\", albumsData.data.listAlbums.items);\n    },\n    async createPhoto(_, data) {\n      const {\n        aws_user_files_s3_bucket_region: region,\n        aws_user_files_s3_bucket: bucket\n      } = awsconfig;\n      const {\n        file,\n        type: mimeType,\n        id\n      } = data;\n      const extension = file.name.substr(file.name.lastIndexOf(\".\") + 1);\n      const photoId = uuid();\n      const key = `image/${photoId}.${extension}`;\n      const inputData = {\n        id: photoId,\n        photoAlbumId: id,\n        contentType: mimeType,\n        fullsize: {\n          key,\n          region,\n          bucket\n        }\n      };\n\n      // S3 bucket storage add file to it\n      try {\n        await Storage.put(key, file, {\n          level: \"protected\",\n          contentType: mimeType,\n          metadata: {\n            albumId: id,\n            photoId\n          }\n        });\n        await API.graphql(graphqlOperation(createPhotoMutation, {\n          input: inputData\n        }));\n        return Promise.resolve(\"success\");\n      } catch (error) {\n        console.log(\"createPhoto error\", error);\n        return Promise.reject(error);\n      }\n    }\n  },\n  getters: {\n    albums: state => state.albums\n  }\n};","map":{"version":3,"names":["API","graphqlOperation","Storage","createAlbum","createAlbumMutation","getAlbum","getAlbumQuery","listAlbums","listAlbumsQuery","createPhoto","createPhotoMutation","v4","uuid","awsconfig","albumInfo","namespaced","state","albums","mutations","setAlbums","payload","actions","dispatch","newAlbum","graphql","input","error","console","_","albumId","id","getAlbumsData","commit","albumsData","data","items","aws_user_files_s3_bucket_region","region","aws_user_files_s3_bucket","bucket","file","type","mimeType","extension","name","substr","lastIndexOf","photoId","key","inputData","photoAlbumId","contentType","fullsize","put","level","metadata","Promise","resolve","log","reject","getters"],"sources":["/Users/evelynliu/VSCodeProjects/photobook/src/store/albums/albums.js"],"sourcesContent":["import {API, graphqlOperation, Storage } from \"aws-amplify\";\nimport { createAlbum as createAlbumMutation } from \"@/graphql/mutations\";\nimport { getAlbum as getAlbumQuery } from \"@/graphql/queries\";\nimport { listAlbums as listAlbumsQuery } from \"@/graphql/queries\";\nimport { createPhoto as createPhotoMutation } from \"@/graphql/mutations\";\n// import { uuid } from \"uuidv4\";\nimport { v4 as uuid } from 'uuid';\nimport awsconfig from \"@/aws-exports\";\n\nexport const albumInfo = {\n    namespaced: true,\n    state: {albums: null},\n    mutations : {\n        setAlbums(state, payload){\n            state.albums = payload;\n        }\n    },\n    actions: {\n        async createAlbum({dispatch}, newAlbum) {\n            try {\n                await API.graphql(graphqlOperation(createAlbumMutation, {input: newAlbum}))\n                dispatch(\"getAlbumsData\");\n            } catch (error) {\n                console.error(\"createalbum\", error)\n            }\n        },\n        async getAlbum(_, albumId) {\n            return await API.graphql(\n                graphqlOperation(getAlbumQuery, {id: albumId}))\n        },\n        async getAlbumsData({commit}) {\n            const albumsData = await API.graphql(graphqlOperation(listAlbumsQuery));\n            commit(\"setAlbums\", albumsData.data.listAlbums.items);\n        },\n        async createPhoto(_, data){\n            const {\n                aws_user_files_s3_bucket_region: region,\n                aws_user_files_s3_bucket: bucket\n            } = awsconfig;\n            const {file, type: mimeType, id} = data;\n            const extension = file.name.substr(file.name.lastIndexOf(\".\")+1);\n            const photoId = uuid();\n            const key = `image/${photoId}.${extension}`;\n            const inputData = {\n                id: photoId,\n                photoAlbumId: id,\n                contentType: mimeType,\n                fullsize: {\n                    key,\n                    region,\n                    bucket\n                }\n            }\n\n            // S3 bucket storage add file to it\n            try {\n                await Storage.put(key, file, {\n                    level: \"protected\",\n                    contentType: mimeType,\n                    metadata: {albumId: id, photoId}\n                })\n                await API.graphql(\n                    graphqlOperation(createPhotoMutation, {input:inputData})\n                )\n                return Promise.resolve(\"success\")\n            } catch (error) {\n                console.log(\"createPhoto error\", error)\n                return Promise.reject(error);\n            }\n        }\n    },\n    getters: {\n        albums: (state) => state.albums\n    }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}