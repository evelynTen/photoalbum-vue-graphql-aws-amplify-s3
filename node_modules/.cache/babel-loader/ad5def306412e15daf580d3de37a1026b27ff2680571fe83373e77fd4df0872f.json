{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { __assign, __awaiter, __generator } from \"tslib\";\nimport { Credentials, Logger, getAmplifyUserAgent } from '@aws-amplify/core';\nimport { S3Client } from '@aws-sdk/client-s3';\nimport { AxiosHttpHandler } from '../providers/axios-http-handler';\nimport { localTestingStorageEndpoint, SET_CONTENT_LENGTH_HEADER } from './StorageConstants';\nvar logger = new Logger('S3ClientUtils');\n// placeholder credentials in order to satisfy type requirement, always results in 403 when used\nvar INVALID_CRED = {\n  accessKeyId: '',\n  secretAccessKey: ''\n};\nexport var getPrefix = function (config) {\n  var credentials = config.credentials,\n    level = config.level,\n    customPrefix = config.customPrefix,\n    identityId = config.identityId;\n  var resolvedCustomPrefix = customPrefix || {};\n  var resolvedIdentityId = identityId || credentials.identityId;\n  var privatePath = (resolvedCustomPrefix.private !== undefined ? resolvedCustomPrefix.private : 'private/') + resolvedIdentityId + '/';\n  var protectedPath = (resolvedCustomPrefix.protected !== undefined ? resolvedCustomPrefix.protected : 'protected/') + resolvedIdentityId + '/';\n  var publicPath = resolvedCustomPrefix.public !== undefined ? resolvedCustomPrefix.public : 'public/';\n  switch (level) {\n    case 'private':\n      return privatePath;\n    case 'protected':\n      return protectedPath;\n    default:\n      return publicPath;\n  }\n};\nexport var createPrefixMiddleware = function (opt, key) {\n  return function (next, _context) {\n    return function (args) {\n      return __awaiter(void 0, void 0, void 0, function () {\n        var credentials, cred, prefix, clonedInput, result;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              return [4 /*yield*/, Credentials.get()];\n            case 1:\n              credentials = _a.sent();\n              cred = Credentials.shear(credentials);\n              prefix = getPrefix(__assign(__assign({}, opt), {\n                credentials: cred\n              }));\n              clonedInput = Object.assign({}, args.input);\n              if (Object.prototype.hasOwnProperty.call(args.input, 'Key')) {\n                clonedInput.Key = prefix + key;\n                args.input = clonedInput;\n              } else if (Object.prototype.hasOwnProperty.call(args.input, 'Prefix')) {\n                clonedInput.Prefix = prefix + key;\n                args.input = clonedInput;\n              }\n              result = next(args);\n              return [2 /*return*/, result];\n          }\n        });\n      });\n    };\n  };\n};\nvar isTimeSkewedError = function (err) {\n  return err.ServerTime && typeof err.Code === 'string' && err.Code === 'RequestTimeTooSkewed';\n};\n// we want to take the S3Client config in parameter so we can modify it's systemClockOffset\nexport var autoAdjustClockskewMiddleware = function (config) {\n  return function (next, _context) {\n    return function (args) {\n      return __awaiter(void 0, void 0, void 0, function () {\n        var err_1, serverDate;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              _a.trys.push([0, 2,, 3]);\n              return [4 /*yield*/, next(args)];\n            case 1:\n              return [2 /*return*/, _a.sent()];\n            case 2:\n              err_1 = _a.sent();\n              if (isTimeSkewedError(err_1)) {\n                serverDate = new Date(err_1.ServerTime);\n                config.systemClockOffset = serverDate.getTime() - Date.now();\n              }\n              throw err_1;\n            case 3:\n              return [2 /*return*/];\n          }\n        });\n      });\n    };\n  };\n};\n\nexport var autoAdjustClockskewMiddlewareOptions = {\n  step: 'finalizeRequest',\n  name: 'autoAdjustClockskewMiddleware'\n};\nexport var prefixMiddlewareOptions = {\n  step: 'initialize',\n  name: 'addPrefixMiddleware'\n};\nexport var credentialsProvider = function () {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var credentials, cred, error_1;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          _a.trys.push([0, 2,, 3]);\n          return [4 /*yield*/, Credentials.get()];\n        case 1:\n          credentials = _a.sent();\n          if (!credentials) return [2 /*return*/, INVALID_CRED];\n          cred = Credentials.shear(credentials);\n          logger.debug('credentials provider get credentials', cred);\n          return [2 /*return*/, cred];\n        case 2:\n          error_1 = _a.sent();\n          logger.warn('credentials provider error', error_1);\n          return [2 /*return*/, INVALID_CRED];\n        case 3:\n          return [2 /*return*/];\n      }\n    });\n  });\n};\n\nexport var createS3Client = function (config, emitter) {\n  var region = config.region,\n    cancelTokenSource = config.cancelTokenSource,\n    dangerouslyConnectToHttpEndpointForTesting = config.dangerouslyConnectToHttpEndpointForTesting,\n    useAccelerateEndpoint = config.useAccelerateEndpoint;\n  var localTestingConfig = {};\n  if (dangerouslyConnectToHttpEndpointForTesting) {\n    localTestingConfig = {\n      endpoint: localTestingStorageEndpoint,\n      tls: false,\n      bucketEndpoint: false,\n      forcePathStyle: true\n    };\n  }\n  var s3client = new S3Client(__assign(__assign({\n    region: region,\n    // Using provider instead of a static credentials, so that if an upload task was in progress, but credentials gets\n    // changed or invalidated (e.g user signed out), the subsequent requests will fail.\n    credentials: credentialsProvider,\n    customUserAgent: getAmplifyUserAgent()\n  }, localTestingConfig), {\n    requestHandler: new AxiosHttpHandler({}, emitter, cancelTokenSource),\n    useAccelerateEndpoint: useAccelerateEndpoint\n  }));\n  s3client.middlewareStack.remove(SET_CONTENT_LENGTH_HEADER);\n  return s3client;\n};","map":{"version":3,"mappings":"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","names":["Credentials","Logger","getAmplifyUserAgent","S3Client","AxiosHttpHandler","localTestingStorageEndpoint","SET_CONTENT_LENGTH_HEADER","logger","INVALID_CRED","accessKeyId","secretAccessKey","getPrefix","config","level","customPrefix","identityId","resolvedCustomPrefix","resolvedIdentityId","credentials","privatePath","private","undefined","protectedPath","protected","publicPath","public","createPrefixMiddleware","opt","key","next","_context","args","get","_a","cred","shear","prefix","clonedInput","Object","assign","input","prototype","hasOwnProperty","call","Key","Prefix","result","isTimeSkewedError","err","ServerTime","Code","autoAdjustClockskewMiddleware","err_1","serverDate","Date","systemClockOffset","getTime","now","autoAdjustClockskewMiddlewareOptions","step","name","prefixMiddlewareOptions","credentialsProvider","debug","warn","error_1","createS3Client","emitter","cancelTokenSource","dangerouslyConnectToHttpEndpointForTesting","useAccelerateEndpoint","localTestingConfig","endpoint","tls","bucketEndpoint","forcePathStyle","s3client","region","customUserAgent","requestHandler","middlewareStack","remove"],"sourceRoot":"","sources":["../../src/common/S3ClientUtils.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module","externalDependencies":[]}