{"ast":null,"code":"var crypto;\n\n// Native crypto from window (Browser)\nif (typeof window !== 'undefined' && window.crypto) {\n  crypto = window.crypto;\n}\n\n// Native (experimental IE 11) crypto from window (Browser)\nif (!crypto && typeof window !== 'undefined' && window.msCrypto) {\n  crypto = window.msCrypto;\n}\n\n// Native crypto from global (NodeJS)\nif (!crypto && typeof global !== 'undefined' && global.crypto) {\n  crypto = global.crypto;\n}\n\n// Native crypto import via require (NodeJS)\nif (!crypto && typeof require === 'function') {\n  try {\n    crypto = require('crypto');\n  } catch (err) {}\n}\n\n/*\n * Cryptographically secure pseudorandom number generator\n * As Math.random() is cryptographically not safe to use\n */\nexport default function cryptoSecureRandomInt() {\n  if (crypto) {\n    // Use getRandomValues method (Browser)\n    if (typeof crypto.getRandomValues === 'function') {\n      try {\n        return crypto.getRandomValues(new Uint32Array(1))[0];\n      } catch (err) {}\n    }\n\n    // Use randomBytes method (NodeJS)\n    if (typeof crypto.randomBytes === 'function') {\n      try {\n        return crypto.randomBytes(4).readInt32LE();\n      } catch (err) {}\n    }\n  }\n  throw new Error('Native crypto module could not be used to get secure random number.');\n}","map":{"version":3,"names":["crypto","window","msCrypto","global","require","err","cryptoSecureRandomInt","getRandomValues","Uint32Array","randomBytes","readInt32LE","Error"],"sources":["/Users/evelynliu/VSCodeProjects/photobook/node_modules/amazon-cognito-identity-js/es/utils/cryptoSecureRandomInt.js"],"sourcesContent":["var crypto;\n\n// Native crypto from window (Browser)\nif (typeof window !== 'undefined' && window.crypto) {\n  crypto = window.crypto;\n}\n\n// Native (experimental IE 11) crypto from window (Browser)\nif (!crypto && typeof window !== 'undefined' && window.msCrypto) {\n  crypto = window.msCrypto;\n}\n\n// Native crypto from global (NodeJS)\nif (!crypto && typeof global !== 'undefined' && global.crypto) {\n  crypto = global.crypto;\n}\n\n// Native crypto import via require (NodeJS)\nif (!crypto && typeof require === 'function') {\n  try {\n    crypto = require('crypto');\n  } catch (err) {}\n}\n\n/*\n * Cryptographically secure pseudorandom number generator\n * As Math.random() is cryptographically not safe to use\n */\nexport default function cryptoSecureRandomInt() {\n  if (crypto) {\n    // Use getRandomValues method (Browser)\n    if (typeof crypto.getRandomValues === 'function') {\n      try {\n        return crypto.getRandomValues(new Uint32Array(1))[0];\n      } catch (err) {}\n    }\n\n    // Use randomBytes method (NodeJS)\n    if (typeof crypto.randomBytes === 'function') {\n      try {\n        return crypto.randomBytes(4).readInt32LE();\n      } catch (err) {}\n    }\n  }\n  throw new Error('Native crypto module could not be used to get secure random number.');\n}"],"mappings":"AAAA,IAAIA,MAAM;;AAEV;AACA,IAAI,OAAOC,MAAM,KAAK,WAAW,IAAIA,MAAM,CAACD,MAAM,EAAE;EAClDA,MAAM,GAAGC,MAAM,CAACD,MAAM;AACxB;;AAEA;AACA,IAAI,CAACA,MAAM,IAAI,OAAOC,MAAM,KAAK,WAAW,IAAIA,MAAM,CAACC,QAAQ,EAAE;EAC/DF,MAAM,GAAGC,MAAM,CAACC,QAAQ;AAC1B;;AAEA;AACA,IAAI,CAACF,MAAM,IAAI,OAAOG,MAAM,KAAK,WAAW,IAAIA,MAAM,CAACH,MAAM,EAAE;EAC7DA,MAAM,GAAGG,MAAM,CAACH,MAAM;AACxB;;AAEA;AACA,IAAI,CAACA,MAAM,IAAI,OAAOI,OAAO,KAAK,UAAU,EAAE;EAC5C,IAAI;IACFJ,MAAM,GAAGI,OAAO,CAAC,QAAQ,CAAC;EAC5B,CAAC,CAAC,OAAOC,GAAG,EAAE,CAAC;AACjB;;AAEA;AACA;AACA;AACA;AACA,eAAe,SAASC,qBAAqB,GAAG;EAC9C,IAAIN,MAAM,EAAE;IACV;IACA,IAAI,OAAOA,MAAM,CAACO,eAAe,KAAK,UAAU,EAAE;MAChD,IAAI;QACF,OAAOP,MAAM,CAACO,eAAe,CAAC,IAAIC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MACtD,CAAC,CAAC,OAAOH,GAAG,EAAE,CAAC;IACjB;;IAEA;IACA,IAAI,OAAOL,MAAM,CAACS,WAAW,KAAK,UAAU,EAAE;MAC5C,IAAI;QACF,OAAOT,MAAM,CAACS,WAAW,CAAC,CAAC,CAAC,CAACC,WAAW,EAAE;MAC5C,CAAC,CAAC,OAAOL,GAAG,EAAE,CAAC;IACjB;EACF;EACA,MAAM,IAAIM,KAAK,CAAC,qEAAqE,CAAC;AACxF"},"metadata":{},"sourceType":"module","externalDependencies":[]}