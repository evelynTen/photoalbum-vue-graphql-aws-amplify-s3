{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { ListLexiconsInput, ListLexiconsOutput } from \"../models/models_0\";\nimport { deserializeAws_restJson1ListLexiconsCommand, serializeAws_restJson1ListLexiconsCommand } from \"../protocols/Aws_restJson1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Returns a list of pronunciation lexicons stored in an AWS Region. For more information,\n *       see <a href=\"https://docs.aws.amazon.com/polly/latest/dg/managing-lexicons.html\">Managing\n *         Lexicons</a>.</p>\n */\nvar ListLexiconsCommand = /** @class */function (_super) {\n  __extends(ListLexiconsCommand, _super);\n  // Start section: command_properties\n  // End section: command_properties\n  function ListLexiconsCommand(input) {\n    var _this =\n    // Start section: command_constructor\n    _super.call(this) || this;\n    _this.input = input;\n    return _this;\n    // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n  ListLexiconsCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"PollyClient\";\n    var commandName = \"ListLexiconsCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: ListLexiconsInput.filterSensitiveLog,\n      outputFilterSensitiveLog: ListLexiconsOutput.filterSensitiveLog\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n  ListLexiconsCommand.prototype.serialize = function (input, context) {\n    return serializeAws_restJson1ListLexiconsCommand(input, context);\n  };\n  ListLexiconsCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_restJson1ListLexiconsCommand(output, context);\n  };\n  return ListLexiconsCommand;\n}($Command);\nexport { ListLexiconsCommand };","map":{"version":3,"mappings":";AACA,SAASA,iBAAiB,EAAEC,kBAAkB,QAAQ,oBAAoB;AAC1E,SACEC,2CAA2C,EAC3CC,yCAAyC,QACpC,4BAA4B;AACnC,SAASC,cAAc,QAAQ,2BAA2B;AAE1D,SAASC,OAAO,IAAIC,QAAQ,QAAQ,wBAAwB;AAc5D;;;;;AAKA;EAAyCC;EAKvC;EACA;EAEA,6BAAqBC,KAA+B;IAApD;IACE;IACAC,iBAAO;IAFYC,WAAK,GAALF,KAAK;;IAGxB;EACF;EAEA;;;EAGAG,+CAAiB,GAAjB,UACEC,WAAmE,EACnEC,aAAwC,EACxCC,OAA8B;IAE9B,IAAI,CAACC,eAAe,CAACC,GAAG,CAACZ,cAAc,CAACS,aAAa,EAAE,IAAI,CAACI,SAAS,EAAE,IAAI,CAACC,WAAW,CAAC,CAAC;IAEzF,IAAMC,KAAK,GAAGP,WAAW,CAACQ,MAAM,CAAC,IAAI,CAACL,eAAe,CAAC;IAE9C,UAAM,GAAKF,aAAa,OAAlB;IACd,IAAMQ,UAAU,GAAG,aAAa;IAChC,IAAMC,WAAW,GAAG,qBAAqB;IACzC,IAAMC,uBAAuB,GAA4B;MACvDC,MAAM;MACNH,UAAU;MACVC,WAAW;MACXG,uBAAuB,EAAEzB,iBAAiB,CAAC0B,kBAAkB;MAC7DC,wBAAwB,EAAE1B,kBAAkB,CAACyB;KAC9C;IACO,kBAAc,GAAKb,aAAa,eAAlB;IACtB,OAAOM,KAAK,CAACS,OAAO,CAClB,UAACC,OAAsC;MACrC,qBAAc,CAACC,MAAM,CAACD,OAAO,CAACA,OAAwB,EAAEf,OAAO,IAAI,EAAE,CAAC;IAAtE,CAAsE,EACxES,uBAAuB,CACxB;EACH,CAAC;EAEOZ,uCAAS,GAAjB,UAAkBH,KAA+B,EAAEuB,OAAuB;IACxE,OAAO5B,yCAAyC,CAACK,KAAK,EAAEuB,OAAO,CAAC;EAClE,CAAC;EAEOpB,yCAAW,GAAnB,UAAoBqB,MAAsB,EAAED,OAAuB;IACjE,OAAO7B,2CAA2C,CAAC8B,MAAM,EAAED,OAAO,CAAC;EACrE,CAAC;EAIH,0BAAC;AAAD,CAAC,CAtDwCzB,QAAQ","names":["ListLexiconsInput","ListLexiconsOutput","deserializeAws_restJson1ListLexiconsCommand","serializeAws_restJson1ListLexiconsCommand","getSerdePlugin","Command","$Command","__extends","input","_super","_this","ListLexiconsCommand","clientStack","configuration","options","middlewareStack","use","serialize","deserialize","stack","concat","clientName","commandName","handlerExecutionContext","logger","inputFilterSensitiveLog","filterSensitiveLog","outputFilterSensitiveLog","resolve","request","handle","context","output"],"sourceRoot":"","sources":["../../../commands/ListLexiconsCommand.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module","externalDependencies":[]}