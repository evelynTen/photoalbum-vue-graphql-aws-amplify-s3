{"ast":null,"code":"import { __awaiter, __extends, __generator, __values } from \"tslib\";\n/**\n * @private For internal Amplify use.\n *\n * Creates a new scope for promises, observables, and other types of work or\n * processes that may be running in the background. This manager provides\n * an singular entrypoint to request termination and await completion.\n *\n * As work completes on its own prior to close, the manager removes them\n * from the registry to avoid holding references to completed jobs.\n */\nvar BackgroundProcessManager = /** @class */function () {\n  /**\n   * Creates a new manager for promises, observables, and other types\n   * of work that may be running in the background. This manager provides\n   * a centralized mechanism to request termination and await completion.\n   */\n  function BackgroundProcessManager() {\n    /**\n     * A string indicating whether the manager is accepting new work (\"Open\"),\n     * waiting for work to complete (\"Closing\"), or fully done with all\n     * submitted work and *not* accepting new jobs (\"Closed\").\n     */\n    this._state = BackgroundProcessManagerState.Open;\n    /**\n     * The list of outstanding jobs we'll need to wait for upon `close()`\n     */\n    this.jobs = new Set();\n  }\n  BackgroundProcessManager.prototype.add = function (jobOrDescription, optionalDescription) {\n    var job;\n    var description;\n    if (typeof jobOrDescription === 'string') {\n      job = undefined;\n      description = jobOrDescription;\n    } else {\n      job = jobOrDescription;\n      description = optionalDescription;\n    }\n    var error = this.closedFailure(description);\n    if (error) return error;\n    if (job === undefined) {\n      return this.addHook(description);\n    } else if (typeof job === 'function') {\n      return this.addFunction(job, description);\n    } else if (job instanceof BackgroundProcessManager) {\n      return this.addManager(job, description);\n    } else {\n      throw new Error('If `job` is provided, it must be an Observable, Function, or BackgroundProcessManager.');\n    }\n  };\n  /**\n   * Adds a **cleaner** function that doesn't immediately get executed.\n   * Instead, the caller gets a **terminate** function back. The *cleaner* is\n   * invoked only once the mananger *closes* or the returned **terminate**\n   * function is called.\n   *\n   * @param clean The cleanup function.\n   * @param description Optional description to help identify pending jobs.\n   * @returns A terminate function.\n   */\n  BackgroundProcessManager.prototype.addCleaner = function (clean, description) {\n    var _this = this;\n    var _a = this.addHook(description),\n      resolve = _a.resolve,\n      onTerminate = _a.onTerminate;\n    var proxy = function () {\n      return __awaiter(_this, void 0, void 0, function () {\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              return [4 /*yield*/, clean()];\n            case 1:\n              _a.sent();\n              resolve();\n              return [2 /*return*/];\n          }\n        });\n      });\n    };\n\n    onTerminate.then(proxy);\n    return proxy;\n  };\n  BackgroundProcessManager.prototype.addFunction = function (job, description) {\n    // the function we call when we want to try to terminate this job.\n    var terminate;\n    // the promise the job can opt into listening to for termination.\n    var onTerminate = new Promise(function (resolve) {\n      terminate = resolve;\n    });\n    // finally! start the job.\n    var jobResult = job(onTerminate);\n    // depending on what the job gives back, register the result\n    // so we can monitor for completion.\n    if (typeof (jobResult === null || jobResult === void 0 ? void 0 : jobResult.then) === 'function') {\n      this.registerPromise(jobResult, terminate, description);\n    }\n    // At the end of the day, or you know, method call, it doesn't matter\n    // what the return value is at all; we just pass it through to the\n    // caller.\n    return jobResult;\n  };\n  BackgroundProcessManager.prototype.addManager = function (manager, description) {\n    var _this = this;\n    this.addCleaner(function () {\n      return __awaiter(_this, void 0, void 0, function () {\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              return [4 /*yield*/, manager.close()];\n            case 1:\n              return [2 /*return*/, _a.sent()];\n          }\n        });\n      });\n    }, description);\n  };\n  /**\n   * Creates and registers a fabricated job for processes that need to operate\n   * with callbacks/hooks. The returned `resolve` and `reject`\n   * functions can be used to signal the job is done successfully or not.\n   * The returned `onTerminate` is a promise that will resolve when the\n   * manager is requesting the termination of the job.\n   *\n   * @param description Optional description to help identify pending jobs.\n   * @returns `{ resolve, reject, onTerminate }`\n   */\n  BackgroundProcessManager.prototype.addHook = function (description) {\n    // the resolve/reject functions we'll provide to the caller to signal\n    // the state of the job.\n    var resolve;\n    var reject;\n    // the underlying promise we'll use to manage it, pretty much like\n    // any other promise.\n    var promise = new Promise(function (res, rej) {\n      resolve = res;\n      reject = rej;\n    });\n    // the function we call when we want to try to terminate this job.\n    var terminate;\n    // the promise the job can opt into listening to for termination.\n    var onTerminate = new Promise(function (resolveTerminate) {\n      terminate = resolveTerminate;\n    });\n    this.registerPromise(promise, terminate, description);\n    return {\n      resolve: resolve,\n      reject: reject,\n      onTerminate: onTerminate\n    };\n  };\n  /**\n   * Adds a Promise based job to the list of jobs for monitoring and listens\n   * for either a success or failure, upon which the job is considered \"done\"\n   * and removed from the registry.\n   *\n   * @param promise A promise that is on its way to being returned to a\n   * caller, which needs to be tracked as a background job.\n   * @param terminate The termination function to register, which can be\n   * invoked to request the job stop.\n   * @param description Optional description to help identify pending jobs.\n   */\n  BackgroundProcessManager.prototype.registerPromise = function (promise, terminate, description) {\n    var _this = this;\n    var jobEntry = {\n      promise: promise,\n      terminate: terminate,\n      description: description\n    };\n    this.jobs.add(jobEntry);\n    // in all of my testing, it is safe to multi-subscribe to a promise.\n    // so, rather than create another layer of promising, we're just going\n    // to hook into the promise we already have, and when it's done\n    // (successfully or not), we no longer need to wait for it upon close.\n    //\n    // sorry this is a bit hand-wavy:\n    //\n    // i believe we use `.then` and `.catch` instead of `.finally` because\n    // `.finally` is invoked in a different order in the sequence, and this\n    // breaks assumptions throughout and causes failures.\n    promise.then(function () {\n      _this.jobs.delete(jobEntry);\n    }).catch(function () {\n      _this.jobs.delete(jobEntry);\n    });\n  };\n  Object.defineProperty(BackgroundProcessManager.prototype, \"length\", {\n    /**\n     * The number of jobs being waited on.\n     *\n     * We don't use this for anything. It's just informational for the caller,\n     * and can be used in logging and testing.\n     *\n     * @returns the number of jobs.\n     */\n    get: function () {\n      return this.jobs.size;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(BackgroundProcessManager.prototype, \"state\", {\n    /**\n     * The execution state of the manager. One of:\n     *\n     * 1. \"Open\" -> Accepting new jobs\n     * 1. \"Closing\" -> Not accepting new work. Waiting for jobs to complete.\n     * 1. \"Closed\" -> Not accepting new work. All submitted jobs are complete.\n     */\n    get: function () {\n      return this._state;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(BackgroundProcessManager.prototype, \"pending\", {\n    /**\n     * The registered `description` of all still-pending jobs.\n     *\n     * @returns descriptions as an array.\n     */\n    get: function () {\n      return Array.from(this.jobs).map(function (job) {\n        return job.description;\n      });\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(BackgroundProcessManager.prototype, \"isOpen\", {\n    /**\n     * Whether the manager is accepting new jobs.\n     */\n    get: function () {\n      return this._state === BackgroundProcessManagerState.Open;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(BackgroundProcessManager.prototype, \"isClosing\", {\n    /**\n     * Whether the manager is rejecting new work, but still waiting for\n     * submitted work to complete.\n     */\n    get: function () {\n      return this._state === BackgroundProcessManagerState.Closing;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(BackgroundProcessManager.prototype, \"isClosed\", {\n    /**\n     * Whether the manager is rejecting work and done waiting for submitted\n     * work to complete.\n     */\n    get: function () {\n      return this._state === BackgroundProcessManagerState.Closed;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  BackgroundProcessManager.prototype.closedFailure = function (description) {\n    if (!this.isOpen) {\n      return Promise.reject(new BackgroundManagerNotOpenError([\"The manager is \" + this.state + \".\", \"You tried to add \\\"\" + description + \"\\\".\", \"Pending jobs: [\\n\" + this.pending.map(function (t) {\n        return '    ' + t;\n      }).join(',\\n') + \"\\n]\"].join('\\n')));\n    }\n  };\n  /**\n   * Signals jobs to stop (for those that accept interruptions) and waits\n   * for confirmation that jobs have stopped.\n   *\n   * This immediately puts the manager into a closing state and just begins\n   * to reject new work. After all work in the manager is complete, the\n   * manager goes into a `Completed` state and `close()` returns.\n   *\n   * This call is idempotent.\n   *\n   * If the manager is already closing or closed, `finalCleaup` is not executed.\n   *\n   * @param onClosed\n   * @returns The settled results of each still-running job's promise. If the\n   * manager is already closed, this will contain the results as of when the\n   * manager's `close()` was called in an `Open` state.\n   */\n  BackgroundProcessManager.prototype.close = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, _b, job;\n      var e_1, _c;\n      return __generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            if (!this.isOpen) return [3 /*break*/, 2];\n            this._state = BackgroundProcessManagerState.Closing;\n            try {\n              for (_a = __values(Array.from(this.jobs)), _b = _a.next(); !_b.done; _b = _a.next()) {\n                job = _b.value;\n                try {\n                  job.terminate();\n                } catch (error) {\n                  // Due to potential races with a job's natural completion, it's\n                  // reasonable to expect the termination call to fail. Hence,\n                  // not logging as an error.\n                  console.warn(\"Failed to send termination signal to job. Error: \" + error.message, job);\n                }\n              }\n            } catch (e_1_1) {\n              e_1 = {\n                error: e_1_1\n              };\n            } finally {\n              try {\n                if (_b && !_b.done && (_c = _a.return)) _c.call(_a);\n              } finally {\n                if (e_1) throw e_1.error;\n              }\n            }\n            // Use `allSettled()` because we want to wait for all to finish. We do\n            // not want to stop waiting if there is a failure.\n            this._closingPromise = Promise.allSettled(Array.from(this.jobs).map(function (j) {\n              return j.promise;\n            }));\n            return [4 /*yield*/, this._closingPromise];\n          case 1:\n            _d.sent();\n            this._state = BackgroundProcessManagerState.Closed;\n            _d.label = 2;\n          case 2:\n            return [2 /*return*/, this._closingPromise];\n        }\n      });\n    });\n  };\n  /**\n   * Signals the manager to start accepting work (again) and returns once\n   * the manager is ready to do so.\n   *\n   * If the state is already `Open`, this call is a no-op.\n   *\n   * If the state is `Closed`, this call simply updates state and returns.\n   *\n   * If the state is `Closing`, this call waits for completion before it\n   * updates the state and returns.\n   */\n  BackgroundProcessManager.prototype.open = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!this.isClosing) return [3 /*break*/, 2];\n            return [4 /*yield*/, this.close()];\n          case 1:\n            _a.sent();\n            _a.label = 2;\n          case 2:\n            this._state = BackgroundProcessManagerState.Open;\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  return BackgroundProcessManager;\n}();\nexport { BackgroundProcessManager };\n/**\n *\n */\nvar BackgroundManagerNotOpenError = /** @class */function (_super) {\n  __extends(BackgroundManagerNotOpenError, _super);\n  function BackgroundManagerNotOpenError(message) {\n    return _super.call(this, \"BackgroundManagerNotOpenError: \" + message) || this;\n  }\n  return BackgroundManagerNotOpenError;\n}(Error);\nexport { BackgroundManagerNotOpenError };\n/**\n * All possible states a `BackgroundProcessManager` instance can be in.\n */\nexport var BackgroundProcessManagerState;\n(function (BackgroundProcessManagerState) {\n  /**\n   * Accepting new jobs.\n   */\n  BackgroundProcessManagerState[\"Open\"] = \"Open\";\n  /**\n   * Not accepting new jobs. Waiting for submitted jobs to complete.\n   */\n  BackgroundProcessManagerState[\"Closing\"] = \"Closing\";\n  /**\n   * Not accepting new jobs. All submitted jobs are complete.\n   */\n  BackgroundProcessManagerState[\"Closed\"] = \"Closed\";\n})(BackgroundProcessManagerState || (BackgroundProcessManagerState = {}));","map":{"version":3,"mappings":";AAAA;;;;;;;;;;AAUA;EAeC;;;;;EAKA;IAnBA;;;;;IAKQ,WAAM,GAAGA,6BAA6B,CAACC,IAAI;IAInD;;;IAGQ,SAAI,GAAG,IAAIC,GAAG,EAAY;EAOnB;EAyDfC,sCAAG,GAAH,UAAIC,gBAAiB,EAAEC,mBAAoB;IAC1C,IAAIC,GAAG;IACP,IAAIC,WAAmB;IAEvB,IAAI,OAAOH,gBAAgB,KAAK,QAAQ,EAAE;MACzCE,GAAG,GAAGE,SAAS;MACfD,WAAW,GAAGH,gBAAgB;KAC9B,MAAM;MACNE,GAAG,GAAGF,gBAAgB;MACtBG,WAAW,GAAGF,mBAAmB;;IAGlC,IAAMI,KAAK,GAAG,IAAI,CAACC,aAAa,CAACH,WAAW,CAAC;IAC7C,IAAIE,KAAK,EAAE,OAAOA,KAAK;IAEvB,IAAIH,GAAG,KAAKE,SAAS,EAAE;MACtB,OAAO,IAAI,CAACG,OAAO,CAACJ,WAAW,CAAC;KAChC,MAAM,IAAI,OAAOD,GAAG,KAAK,UAAU,EAAE;MACrC,OAAO,IAAI,CAACM,WAAW,CAACN,GAAG,EAAEC,WAAW,CAAC;KACzC,MAAM,IAAID,GAAG,YAAYH,wBAAwB,EAAE;MACnD,OAAO,IAAI,CAACU,UAAU,CAACP,GAAG,EAAEC,WAAW,CAAC;KACxC,MAAM;MACN,MAAM,IAAIO,KAAK,CACd,wFAAwF,CACxF;;EAEH,CAAC;EAED;;;;;;;;;;EAUAX,6CAAU,GAAV,UACCY,KAAuB,EACvBR,WAAoB;IAFrB;IAIO,kCAAoD;MAAlDS,oBAAO;MAAEC,4BAAyC;IAE1D,IAAMC,KAAK,GAAG;MAAA;;;;cACb,qBAAMH,KAAK,EAAE;;cAAbI,SAAa;cACbH,OAAO,EAAE;;;;;KACT;;IAEDC,WAAW,CAACG,IAAI,CAACF,KAAK,CAAC;IAEvB,OAAOA,KAAK;EACb,CAAC;EAUOf,8CAAW,GAAnB,UAAoBG,GAAG,EAAEC,WAAW;IACnC;IACA,IAAIc,SAAS;IAEb;IACA,IAAMJ,WAAW,GAAG,IAAIK,OAAO,CAAC,iBAAO;MACtCD,SAAS,GAAGL,OAAO;IACpB,CAAC,CAAC;IAEF;IACA,IAAMO,SAAS,GAAGjB,GAAG,CAACW,WAAW,CAAC;IAElC;IACA;IACA,IAAI,QAAOM,SAAS,aAATA,SAAS,uBAATA,SAAS,CAAEH,IAAI,MAAK,UAAU,EAAE;MAC1C,IAAI,CAACI,eAAe,CAACD,SAAS,EAAEF,SAAS,EAAEd,WAAW,CAAC;;IAGxD;IACA;IACA;IACA,OAAOgB,SAAS;EACjB,CAAC;EAEOpB,6CAAU,GAAlB,UAAmBsB,OAAiC,EAAElB,WAAoB;IAA1E;IACC,IAAI,CAACmB,UAAU,CAAC;MAAA;QAAA;;;cAAY,qBAAMD,OAAO,CAACE,KAAK,EAAE;;cAArB,+BAAqB;UAAA;;;KAAA,EAAEpB,WAAW,CAAC;EAChE,CAAC;EAED;;;;;;;;;;EAUQJ,0CAAO,GAAf,UAAgBI,WAAoB;IACnC;IACA;IACA,IAAIS,OAAmC;IACvC,IAAIY,MAA+B;IAEnC;IACA;IACA,IAAMC,OAAO,GAAG,IAAIP,OAAO,CAAC,UAACQ,GAAG,EAAEC,GAAG;MACpCf,OAAO,GAAGc,GAAG;MACbF,MAAM,GAAGG,GAAG;IACb,CAAC,CAAC;IAEF;IACA,IAAIV,SAAS;IAEb;IACA,IAAMJ,WAAW,GAAG,IAAIK,OAAO,CAAC,0BAAgB;MAC/CD,SAAS,GAAGW,gBAAgB;IAC7B,CAAC,CAAC;IAEF,IAAI,CAACR,eAAe,CAACK,OAAO,EAAER,SAAS,EAAEd,WAAW,CAAC;IAErD,OAAO;MACNS,OAAO;MACPY,MAAM;MACNX,WAAW;KACX;EACF,CAAC;EAED;;;;;;;;;;;EAWQd,kDAAe,GAAvB,UACC0B,OAAU,EACVR,SAAqB,EACrBd,WAAoB;IAHrB;IAKC,IAAM0B,QAAQ,GAAG;MAAEJ,OAAO;MAAER,SAAS;MAAEd,WAAW;IAAA,CAAE;IACpD,IAAI,CAAC2B,IAAI,CAACC,GAAG,CAACF,QAAQ,CAAC;IAEvB;IACA;IACA;IACA;IAEA;IACA;IACA;IACA;IACA;IACA;IACAJ,OAAO,CACLT,IAAI,CAAC;MACLgB,KAAI,CAACF,IAAI,CAACG,MAAM,CAACJ,QAAQ,CAAC;IAC3B,CAAC,CAAC,CACDK,KAAK,CAAC;MACNF,KAAI,CAACF,IAAI,CAACG,MAAM,CAACJ,QAAQ,CAAC;IAC3B,CAAC,CAAC;EACJ,CAAC;EAUDM,sBAAIpC,4CAAM;IARV;;;;;;;;SAQA;MACC,OAAO,IAAI,CAAC+B,IAAI,CAACM,IAAI;IACtB,CAAC;;;;EASDD,sBAAIpC,2CAAK;IAPT;;;;;;;SAOA;MACC,OAAO,IAAI,CAACsC,MAAM;IACnB,CAAC;;;;EAODF,sBAAIpC,6CAAO;IALX;;;;;SAKA;MACC,OAAOuC,KAAK,CAACC,IAAI,CAAC,IAAI,CAACT,IAAI,CAAC,CAACU,GAAG,CAAC,aAAG;QAAI,UAAG,CAACrC,WAAW;MAAf,CAAe,CAAC;IACzD,CAAC;;;;EAKDgC,sBAAIpC,4CAAM;IAHV;;;SAGA;MACC,OAAO,IAAI,CAACsC,MAAM,KAAKzC,6BAA6B,CAACC,IAAI;IAC1D,CAAC;;;;EAMDsC,sBAAIpC,+CAAS;IAJb;;;;SAIA;MACC,OAAO,IAAI,CAACsC,MAAM,KAAKzC,6BAA6B,CAAC6C,OAAO;IAC7D,CAAC;;;;EAMDN,sBAAIpC,8CAAQ;IAJZ;;;;SAIA;MACC,OAAO,IAAI,CAACsC,MAAM,KAAKzC,6BAA6B,CAAC8C,MAAM;IAC5D,CAAC;;;;EAEO3C,gDAAa,GAArB,UAAsBI,WAAmB;IACxC,IAAI,CAAC,IAAI,CAACwC,MAAM,EAAE;MACjB,OAAOzB,OAAO,CAACM,MAAM,CACpB,IAAIoB,6BAA6B,CAChC,CACC,oBAAkB,IAAI,CAACC,KAAK,MAAG,EAC/B,wBAAqB1C,WAAW,QAAI,EACpC,sBAAoB,IAAI,CAAC2C,OAAO,CAC9BN,GAAG,CAAC,WAAC;QAAI,aAAM,GAAGO,CAAC;MAAV,CAAU,CAAC,CACpBC,IAAI,CAAC,KAAK,CAAC,QAAK,CAClB,CAACA,IAAI,CAAC,IAAI,CAAC,CACZ,CACD;;EAEH,CAAC;EAED;;;;;;;;;;;;;;;;;EAiBMjD,wCAAK,GAAX;;;;;;;iBACK,IAAI,CAAC4C,MAAM,EAAX;YACH,IAAI,CAACN,MAAM,GAAGzC,6BAA6B,CAAC6C,OAAO;;cACnD,KAAkB1B,mBAAK,CAACwB,IAAI,CAAC,IAAI,CAACT,IAAI,CAAC,6CAAE;gBAA9B5B,GAAG;gBACb,IAAI;kBACHA,GAAG,CAACe,SAAS,EAAE;iBACf,CAAC,OAAOZ,KAAK,EAAE;kBACf;kBACA;kBACA;kBACA4C,OAAO,CAACC,IAAI,CACX,sDAAoD7C,KAAK,CAAC8C,OAAS,EACnEjD,GAAG,CACH;;;;;;;;;;;;;;YAIH;YACA;YACA,IAAI,CAACkD,eAAe,GAAGlC,OAAO,CAACmC,UAAU,CACxCf,KAAK,CAACC,IAAI,CAAC,IAAI,CAACT,IAAI,CAAC,CAACU,GAAG,CAAC,WAAC;cAAI,QAAC,CAACf,OAAO;YAAT,CAAS,CAAC,CACzC;YAED,qBAAM,IAAI,CAAC2B,eAAe;;YAA1BE,SAA0B;YAC1B,IAAI,CAACjB,MAAM,GAAGzC,6BAA6B,CAAC8C,MAAM;;;YAGnD,sBAAO,IAAI,CAACU,eAAsB;QAAC;;;GACnC;EAED;;;;;;;;;;;EAWMrD,uCAAI,GAAV;;;;;iBACK,IAAI,CAACwD,SAAS,EAAd;YACH,qBAAM,IAAI,CAAChC,KAAK,EAAE;;YAAlBR,SAAkB;;;YAGnB,IAAI,CAACsB,MAAM,GAAGzC,6BAA6B,CAACC,IAAI;;;;;GAChD;;EACF,+BAAC;AAAD,CAAC,EA9XD;;AAgYA;;;AAGA;EAAmD2D;EAClD,uCAAYL,OAAe;WAC1BM,kBAAM,oCAAkCN,OAAS,CAAC;EACnD;EACD,oCAAC;AAAD,CAAC,CAJkDzC,KAAK;;AAMxD;;;AAGA,WAAYd,6BAeX;AAfD,WAAYA,6BAA6B;EACxC;;;EAGAA,8CAAa;EAEb;;;EAGAA,oDAAmB;EAEnB;;;EAGAA,kDAAiB;AAClB,CAAC,EAfWA,6BAA6B,KAA7BA,6BAA6B","names":["BackgroundProcessManagerState","Open","Set","BackgroundProcessManager","jobOrDescription","optionalDescription","job","description","undefined","error","closedFailure","addHook","addFunction","addManager","Error","clean","resolve","onTerminate","proxy","_a","then","terminate","Promise","jobResult","registerPromise","manager","addCleaner","close","reject","promise","res","rej","resolveTerminate","jobEntry","jobs","add","_this","delete","catch","Object","size","_state","Array","from","map","Closing","Closed","isOpen","BackgroundManagerNotOpenError","state","pending","t","join","console","warn","message","_closingPromise","allSettled","_d","isClosing","__extends","_super"],"sourceRoot":"","sources":["../../src/Util/BackgroundProcessManager.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module","externalDependencies":[]}