{"ast":null,"code":"import \"core-js/modules/web.dom-exception.stack.js\";\n/**\n * Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nimport { ConsoleLogger as Logger } from '../Logger';\nimport { browserOrNode } from '../JS';\nimport { Amplify } from '../Amplify';\n/**\n * Provides a means to registering a service worker in the browser\n * and communicating with it via postMessage events.\n * https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API/\n *\n * postMessage events are currently not supported in all browsers. See:\n * https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API\n *\n * At the minmum this class will register the service worker and listen\n * and attempt to dispatch messages on state change and record analytics\n * events based on the service worker lifecycle.\n */\nvar ServiceWorkerClass = /** @class */function () {\n  function ServiceWorkerClass() {\n    // The AWS Amplify logger\n    this._logger = new Logger('ServiceWorker');\n  }\n  Object.defineProperty(ServiceWorkerClass.prototype, \"serviceWorker\", {\n    /**\n     * Get the currently active service worker\n     */\n    get: function () {\n      return this._serviceWorker;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Register the service-worker.js file in the browser\n   * Make sure the service-worker.js is part of the build\n   * for example with Angular, modify the angular-cli.json file\n   * and add to \"assets\" array \"service-worker.js\"\n   * @param {string} - (optional) Service worker file. Defaults to \"/service-worker.js\"\n   * @param {string} - (optional) The service worker scope. Defaults to \"/\"\n   *  - API Doc: https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer/register\n   * @returns {Promise}\n   *\t- resolve(ServiceWorkerRegistration)\n   *\t- reject(Error)\n   **/\n  ServiceWorkerClass.prototype.register = function (filePath, scope) {\n    var _this = this;\n    if (filePath === void 0) {\n      filePath = '/service-worker.js';\n    }\n    if (scope === void 0) {\n      scope = '/';\n    }\n    this._logger.debug(\"registering \" + filePath);\n    this._logger.debug(\"registering service worker with scope \" + scope);\n    return new Promise(function (resolve, reject) {\n      if (navigator && 'serviceWorker' in navigator) {\n        navigator.serviceWorker.register(filePath, {\n          scope: scope\n        }).then(function (registration) {\n          if (registration.installing) {\n            _this._serviceWorker = registration.installing;\n          } else if (registration.waiting) {\n            _this._serviceWorker = registration.waiting;\n          } else if (registration.active) {\n            _this._serviceWorker = registration.active;\n          }\n          _this._registration = registration;\n          _this._setupListeners();\n          _this._logger.debug(\"Service Worker Registration Success: \" + registration);\n          return resolve(registration);\n        }).catch(function (error) {\n          _this._logger.debug(\"Service Worker Registration Failed \" + error);\n          return reject(error);\n        });\n      } else {\n        return reject(new Error('Service Worker not available'));\n      }\n    });\n  };\n  /**\n   * Enable web push notifications. If not subscribed, a new subscription will\n   * be created and registered.\n   * \tTest Push Server: https://web-push-codelab.glitch.me/\n   * \tPush Server Libraries: https://github.com/web-push-libs/\n   * \tAPI Doc: https://developers.google.com/web/fundamentals/codelabs/push-notifications/\n   * @param publicKey\n   * @returns {Promise}\n   * \t- resolve(PushSubscription)\n   *  - reject(Error)\n   */\n  ServiceWorkerClass.prototype.enablePush = function (publicKey) {\n    var _this = this;\n    if (!this._registration) throw new Error('Service Worker not registered');\n    this._publicKey = publicKey;\n    return new Promise(function (resolve, reject) {\n      if (browserOrNode().isBrowser) {\n        _this._registration.pushManager.getSubscription().then(function (subscription) {\n          if (subscription) {\n            _this._subscription = subscription;\n            _this._logger.debug(\"User is subscribed to push: \" + JSON.stringify(subscription));\n            resolve(subscription);\n          } else {\n            _this._logger.debug(\"User is NOT subscribed to push\");\n            return _this._registration.pushManager.subscribe({\n              userVisibleOnly: true,\n              applicationServerKey: _this._urlB64ToUint8Array(publicKey)\n            }).then(function (subscription) {\n              _this._subscription = subscription;\n              _this._logger.debug(\"User subscribed: \" + JSON.stringify(subscription));\n              resolve(subscription);\n            }).catch(function (error) {\n              _this._logger.error(error);\n            });\n          }\n        });\n      } else {\n        return reject(new Error('Service Worker not available'));\n      }\n    });\n  };\n  /**\n   * Convert a base64 encoded string to a Uint8 array for the push server key\n   * @param base64String\n   */\n  ServiceWorkerClass.prototype._urlB64ToUint8Array = function (base64String) {\n    var padding = '='.repeat((4 - base64String.length % 4) % 4);\n    var base64 = (base64String + padding).replace(/\\-/g, '+').replace(/_/g, '/');\n    var rawData = window.atob(base64);\n    var outputArray = new Uint8Array(rawData.length);\n    for (var i = 0; i < rawData.length; ++i) {\n      outputArray[i] = rawData.charCodeAt(i);\n    }\n    return outputArray;\n  };\n  /**\n   * Send a message to the service worker. The service worker needs\n   * to implement `self.addEventListener('message') to handle the\n   * message. This ***currently*** does not work in Safari or IE.\n   * @param {object | string} - An arbitrary JSON object or string message to send to the service worker\n   *\t- see: https://developer.mozilla.org/en-US/docs/Web/API/Transferable\n   * @returns {Promise}\n   **/\n  ServiceWorkerClass.prototype.send = function (message) {\n    if (this._serviceWorker) {\n      this._serviceWorker.postMessage(typeof message === 'object' ? JSON.stringify(message) : message);\n    }\n  };\n  /**\n   * Listen for service worker state change and message events\n   * https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorker/state\n   **/\n  ServiceWorkerClass.prototype._setupListeners = function () {\n    var _this = this;\n    this._serviceWorker.addEventListener('statechange', function (event) {\n      var currentState = _this._serviceWorker.state;\n      _this._logger.debug(\"ServiceWorker statechange: \" + currentState);\n      if (Amplify.Analytics && typeof Amplify.Analytics.record === 'function') {\n        Amplify.Analytics.record({\n          name: 'ServiceWorker',\n          attributes: {\n            state: currentState\n          }\n        });\n      }\n    });\n    this._serviceWorker.addEventListener('message', function (event) {\n      _this._logger.debug(\"ServiceWorker message event: \" + event);\n    });\n  };\n  return ServiceWorkerClass;\n}();\nexport { ServiceWorkerClass };","map":{"version":3,"mappings":"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","names":["ConsoleLogger","Logger","browserOrNode","Amplify","Object","ServiceWorkerClass","_serviceWorker","filePath","scope","_logger","debug","Promise","resolve","reject","navigator","serviceWorker","register","then","registration","installing","_this","waiting","active","_registration","_setupListeners","catch","error","Error","publicKey","_publicKey","isBrowser","pushManager","getSubscription","subscription","_subscription","JSON","stringify","subscribe","userVisibleOnly","applicationServerKey","_urlB64ToUint8Array","base64String","padding","repeat","length","base64","replace","rawData","window","atob","outputArray","Uint8Array","i","charCodeAt","message","postMessage","addEventListener","currentState","state","Analytics","record","name","attributes","event"],"sourceRoot":"","sources":["../../src/ServiceWorker/ServiceWorker.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module","externalDependencies":[]}