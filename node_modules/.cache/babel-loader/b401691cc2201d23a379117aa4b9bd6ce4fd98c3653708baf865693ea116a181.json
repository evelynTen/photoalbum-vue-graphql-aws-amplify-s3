{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { PutLexiconInput, PutLexiconOutput } from \"../models/models_0\";\nimport { deserializeAws_restJson1PutLexiconCommand, serializeAws_restJson1PutLexiconCommand } from \"../protocols/Aws_restJson1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Stores a pronunciation lexicon in an AWS Region. If a lexicon with the same name\n *       already exists in the region, it is overwritten by the new lexicon. Lexicon operations have\n *       eventual consistency, therefore, it might take some time before the lexicon is available to\n *       the SynthesizeSpeech operation.</p>\n *          <p>For more information, see <a href=\"https://docs.aws.amazon.com/polly/latest/dg/managing-lexicons.html\">Managing\n *         Lexicons</a>.</p>\n */\nvar PutLexiconCommand = /** @class */function (_super) {\n  __extends(PutLexiconCommand, _super);\n  // Start section: command_properties\n  // End section: command_properties\n  function PutLexiconCommand(input) {\n    var _this =\n    // Start section: command_constructor\n    _super.call(this) || this;\n    _this.input = input;\n    return _this;\n    // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n  PutLexiconCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"PollyClient\";\n    var commandName = \"PutLexiconCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: PutLexiconInput.filterSensitiveLog,\n      outputFilterSensitiveLog: PutLexiconOutput.filterSensitiveLog\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n  PutLexiconCommand.prototype.serialize = function (input, context) {\n    return serializeAws_restJson1PutLexiconCommand(input, context);\n  };\n  PutLexiconCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_restJson1PutLexiconCommand(output, context);\n  };\n  return PutLexiconCommand;\n}($Command);\nexport { PutLexiconCommand };","map":{"version":3,"mappings":";AACA,SAASA,eAAe,EAAEC,gBAAgB,QAAQ,oBAAoB;AACtE,SACEC,yCAAyC,EACzCC,uCAAuC,QAClC,4BAA4B;AACnC,SAASC,cAAc,QAAQ,2BAA2B;AAE1D,SAASC,OAAO,IAAIC,QAAQ,QAAQ,wBAAwB;AAc5D;;;;;;;;AAQA;EAAuCC;EAKrC;EACA;EAEA,2BAAqBC,KAA6B;IAAlD;IACE;IACAC,iBAAO;IAFYC,WAAK,GAALF,KAAK;;IAGxB;EACF;EAEA;;;EAGAG,6CAAiB,GAAjB,UACEC,WAAmE,EACnEC,aAAwC,EACxCC,OAA8B;IAE9B,IAAI,CAACC,eAAe,CAACC,GAAG,CAACZ,cAAc,CAACS,aAAa,EAAE,IAAI,CAACI,SAAS,EAAE,IAAI,CAACC,WAAW,CAAC,CAAC;IAEzF,IAAMC,KAAK,GAAGP,WAAW,CAACQ,MAAM,CAAC,IAAI,CAACL,eAAe,CAAC;IAE9C,UAAM,GAAKF,aAAa,OAAlB;IACd,IAAMQ,UAAU,GAAG,aAAa;IAChC,IAAMC,WAAW,GAAG,mBAAmB;IACvC,IAAMC,uBAAuB,GAA4B;MACvDC,MAAM;MACNH,UAAU;MACVC,WAAW;MACXG,uBAAuB,EAAEzB,eAAe,CAAC0B,kBAAkB;MAC3DC,wBAAwB,EAAE1B,gBAAgB,CAACyB;KAC5C;IACO,kBAAc,GAAKb,aAAa,eAAlB;IACtB,OAAOM,KAAK,CAACS,OAAO,CAClB,UAACC,OAAsC;MACrC,qBAAc,CAACC,MAAM,CAACD,OAAO,CAACA,OAAwB,EAAEf,OAAO,IAAI,EAAE,CAAC;IAAtE,CAAsE,EACxES,uBAAuB,CACxB;EACH,CAAC;EAEOZ,qCAAS,GAAjB,UAAkBH,KAA6B,EAAEuB,OAAuB;IACtE,OAAO5B,uCAAuC,CAACK,KAAK,EAAEuB,OAAO,CAAC;EAChE,CAAC;EAEOpB,uCAAW,GAAnB,UAAoBqB,MAAsB,EAAED,OAAuB;IACjE,OAAO7B,yCAAyC,CAAC8B,MAAM,EAAED,OAAO,CAAC;EACnE,CAAC;EAIH,wBAAC;AAAD,CAAC,CAtDsCzB,QAAQ","names":["PutLexiconInput","PutLexiconOutput","deserializeAws_restJson1PutLexiconCommand","serializeAws_restJson1PutLexiconCommand","getSerdePlugin","Command","$Command","__extends","input","_super","_this","PutLexiconCommand","clientStack","configuration","options","middlewareStack","use","serialize","deserialize","stack","concat","clientName","commandName","handlerExecutionContext","logger","inputFilterSensitiveLog","filterSensitiveLog","outputFilterSensitiveLog","resolve","request","handle","context","output"],"sourceRoot":"","sources":["../../../commands/PutLexiconCommand.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module","externalDependencies":[]}